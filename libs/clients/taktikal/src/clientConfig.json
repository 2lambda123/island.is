{
  "swagger": "2.0",
  "info": { "title": "Taktikal Core API", "version": "1.0" },
  "host": "onboardingdev.taktikal.is",
  "basePath": "/api",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/signing/activity/{ProcessKey}": {
      "get": {
        "tags": ["signing activity"],
        "summary": "Gets activity log for Signing process",
        "description": "Gets activity log for Signing process",
        "operationId": "GetSigningProcessActivityactivityProcessKey_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "User",
            "in": "query",
            "description": "The email of the user",
            "type": "string",
            "required": false
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
            "type": "string",
            "format": "date-time",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date of the log to be searched, must be a bigger date than StartDate ",
            "type": "string",
            "format": "date-time",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "Use if to be filtered on a single signing process",
            "type": "string",
            "required": true
          },
          {
            "name": "FlowType",
            "in": "query",
            "description": "Can be used to only get activity for a specific flow type.",
            "type": "string",
            "required": false
          },
          {
            "name": "Take",
            "in": "query",
            "description": "used to page the result set and only return N many results",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "used to page the result set and skip the first N results",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "FlowKey",
            "in": "query",
            "description": "If it has a value we only return records that match this flowKey",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<SigningProcessActivityLogWrapper>",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SigningProcessActivityLogWrapper"
              }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/activity/user/": {
      "get": {
        "tags": ["signing activity"],
        "summary": "Gets activity log for a user for a period",
        "description": "Gets activity log for a user for a period",
        "operationId": "GetSigningProcessActivityForUseractivityuser_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "User",
            "in": "query",
            "description": "The email of the user",
            "type": "string",
            "required": false
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
            "type": "string",
            "format": "date-time",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date of the log to be searched, must be a bigger date than StartDate ",
            "type": "string",
            "format": "date-time",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "ProcessKey",
            "in": "query",
            "description": "Use if to be filtered on a single signing process",
            "type": "string",
            "required": false
          },
          {
            "name": "FlowType",
            "in": "query",
            "description": "Can be used to only get activity for a specific flow type.",
            "type": "string",
            "required": false
          },
          {
            "name": "Take",
            "in": "query",
            "description": "used to page the result set and only return N many results",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "used to page the result set and skip the first N results",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "FlowKey",
            "in": "query",
            "description": "If it has a value we only return records that match this flowKey",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<SigningProcessActivityLogWrapper>",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SigningProcessActivityLogWrapper"
              }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/activity/company": {
      "get": {
        "tags": ["signing activity"],
        "summary": "Gets activity log for a Company",
        "description": "Gets activity log for a Company",
        "operationId": "GetSigningProcessActivityByCompanyactivitycompany_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
            "type": "string",
            "format": "date-time",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date of the log to be searched, must be a bigger date than StartDate ",
            "type": "string",
            "format": "date-time",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "Take",
            "in": "query",
            "description": "used to page the result set and only return N many results",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "used to page the result set and skip the first N results",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "User",
            "in": "query",
            "description": "The email of the user",
            "type": "string",
            "required": false
          },
          {
            "name": "FlowType",
            "in": "query",
            "description": "Can be used to only get activity for a specific flow type.",
            "type": "string",
            "required": false
          },
          {
            "name": "FlowKey",
            "in": "query",
            "description": "If it has a value we only return records that match this flowKey",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<SigningProcessActivityLogWrapper>",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SigningProcessActivityLogWrapper"
              }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/sequential/{SequenceKey}": {
      "post": {
        "tags": ["signing"],
        "summary": "Authenticate a signee into a signing sequence",
        "description": "Authenticate a signee into a signing sequence",
        "operationId": "RequestToViewSequencesequentialSequenceKey_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "SequenceKey",
            "in": "path",
            "description": "Sequential signing process identifier that has to be provided.",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/RequestToViewSequence" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SequentialSigning" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/{ProcessKey}/branding": {
      "get": {
        "tags": ["signing"],
        "summary": "returns logo and colors for the signingProcess",
        "description": "returns logo and colors for the signingProcess",
        "operationId": "GetCompanyBrandingProcessKeybranding_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "The key for a specific flow",
            "type": "string",
            "required": false
          },
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "The signing process key",
            "type": "string",
            "required": true
          },
          {
            "name": "SequenceKey",
            "in": "query",
            "description": "The sequence signing process key",
            "type": "string",
            "required": false
          },
          {
            "name": "CompanyKey",
            "in": "query",
            "description": "The company key",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Data found",
            "schema": { "$ref": "#/definitions/CompanyBranding" }
          },
          "400": {
            "description": "Invalid key",
            "schema": { "$ref": "#/definitions/CompanyBranding" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/simple/otp": {
      "get": {
        "tags": ["signing"],
        "summary": "Proved the OTP code to sign the document. Returns the signed document.",
        "description": "Proved the OTP code to sign the document. Returns the signed document.",
        "operationId": "SimpleSigningOtpRequestsimpleotp_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Token",
            "in": "query",
            "type": "string",
            "required": true
          },
          { "name": "OTP", "in": "query", "type": "string", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SimpleSigningOtpResponse" }
          },
          "400": {
            "description": "Token not found | Incorrect OTP code | Token expired",
            "schema": { "$ref": "#/definitions/SimpleSigningOtpResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/simple/imageData": {
      "post": {
        "tags": ["signing"],
        "summary": "Saves the signatureImage that will be included in the PDF",
        "description": "Saves the signatureImage that will be included in the PDF",
        "operationId": "CreateSimpleSignatureImageRequestsimpleimageData_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "ProcessKey", "in": "query", "type": "string" },
          { "name": "SigneeKey", "in": "query", "type": "string" },
          {
            "name": "Image",
            "in": "query",
            "type": "string",
            "format": "byte",
            "x-nullable": false
          },
          {
            "name": "ImageWidth",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "ImageHeight",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "ImageXInsetFac",
            "in": "query",
            "type": "number",
            "format": "double",
            "x-nullable": false
          },
          {
            "name": "ImageYBaselineFac",
            "in": "query",
            "type": "number",
            "format": "double",
            "x-nullable": false
          },
          {
            "name": "ImageWidthFac",
            "in": "query",
            "type": "number",
            "format": "double",
            "x-nullable": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSimpleSignatureImageRequest"
            }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/apikeys": {
      "get": {
        "tags": ["auth"],
        "summary": "Fetches all apiKeys for a company",
        "description": "Fetches all apiKeys for a company",
        "operationId": "MgmtListApiKeysapikeys_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<ApiKey>",
              "type": "array",
              "items": { "$ref": "#/definitions/ApiKey" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "post": {
        "tags": ["auth"],
        "summary": "Create an apikey for a company",
        "description": "Create an apikey for a company",
        "operationId": "MgmtCreateApiKeyapikeys_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "Name", "in": "query", "type": "string" },
          { "name": "Permissions", "in": "query", "type": "string" },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/MgmtCreateApiKey" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ApiKeyCreated" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/emailtemplate": {
      "get": {
        "tags": ["email template"],
        "summary": "Get email templates by Flow key",
        "description": "Get email templates by Flow key",
        "operationId": "MgmtGetEmailTemplatesemailtemplate_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "Flow key associated with the email template ",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<EmailTemplate>",
              "type": "array",
              "items": { "$ref": "#/definitions/EmailTemplate" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "put": {
        "tags": ["email template"],
        "summary": "Update email template",
        "description": "Update email template",
        "operationId": "MgmtUpdateEmailTemplateemailtemplate_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/MgmtUpdateEmailTemplate" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/EmailTemplate" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "post": {
        "tags": ["email template"],
        "summary": "Create email template",
        "description": "Create email template",
        "operationId": "MgmtCreateEmailTemplateemailtemplate_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/MgmtCreateEmailTemplate" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/EmailTemplate" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "delete": {
        "tags": ["email template"],
        "summary": "Delete an email template",
        "description": "Delete an email template",
        "operationId": "MgmtDeleteEmailTemplateemailtemplate_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "Flow key associated with the email template",
            "type": "string",
            "required": true
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Id of the email template",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeleteEmailTemplateResponse" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/flow": {
      "get": {
        "tags": ["flow"],
        "summary": "Get array of flow details for a company",
        "description": "Get array of flow details for a company",
        "operationId": "MgmtFlowFilterflow_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<FlowOverview>",
              "type": "array",
              "items": { "$ref": "#/definitions/FlowOverview" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "put": {
        "tags": ["flow"],
        "summary": "Update a flow",
        "description": "Update a flow",
        "operationId": "MgmtUpdateFlowflow_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/MgmtUpdateFlow" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Flow" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "post": {
        "tags": ["flow"],
        "summary": "Create a flow",
        "description": "Create a flow",
        "operationId": "MgmtCreateFlowflow_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/MgmtCreateFlow" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Flow" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/statistics": {
      "get": {
        "tags": ["statistics"],
        "summary": "Get flow usage statistics",
        "description": "Get flow usage statistics",
        "operationId": "MgmtFlowUsageStatsFilterstatistics_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "The key for a specific flow",
            "type": "string",
            "required": false
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date of the log to be searched, must be a bigger date than StartDate ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "name": "Statuses",
            "in": "query",
            "description": "List of signing process statuses ",
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi",
            "required": false
          },
          {
            "name": "FlowTypes",
            "in": "query",
            "description": "Filter by type of flows ",
            "type": "array",
            "items": { "type": "string", "x-nullable": false },
            "collectionFormat": "multi",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<FlowUsageStats>",
              "type": "array",
              "items": { "$ref": "#/definitions/FlowUsageStats" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/webhook/": {
      "post": {
        "tags": ["webhook"],
        "operationId": "Webhookwebhook_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/Webhook" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Webhook" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/sealing": {
      "post": {
        "tags": ["document sealing"],
        "summary": "Takes in a PDF document and seals it",
        "description": "Takes in a PDF document and seals it",
        "operationId": "SealingRequestsealing_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/SealingRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SealingResponse" }
          },
          "400": {
            "description": "if any of the input is invalid ",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Internal server error",
            "schema": { "$ref": "#/definitions/SealingResponse" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/signing": {
      "post": {
        "tags": ["signing"],
        "summary": "Creates a new Signing process with a array of signees",
        "description": "Creates a new Signing process with a array of signees",
        "operationId": "CreateSigningProcesssigning_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CreateSigningProcess" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SigningProcess" }
          },
          "400": {
            "description": "if any of the input is invalid or if a signee ",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "delete": {
        "tags": ["signing"],
        "summary": "Cancel the Signing process",
        "description": "Cancel the Signing process",
        "operationId": "CancelSigningProcesssigning_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "ProcessKey", "in": "query", "type": "string" },
          { "name": "User", "in": "query", "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SigningProcess" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/apikeys/{Id}": {
      "put": {
        "tags": ["auth"],
        "summary": "Update an an apikey for a company",
        "description": "Update an an apikey for a company",
        "operationId": "MgmtUpdateApiKeyapikeysId_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The Id for this apikey",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/MgmtUpdateApiKey" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ApiKey" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "delete": {
        "tags": ["auth"],
        "summary": "Update an an apikey for a company",
        "description": "Update an an apikey for a company",
        "operationId": "MgmtDeleteApiKeyapikeysId_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The Id for this apikey",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ApiKey" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/company/css": {
      "post": {
        "tags": ["company"],
        "summary": "Create or update the company custom css",
        "description": "Create or update the company custom css",
        "operationId": "MgmtCreateCompanyCustomCsscompanycss_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/MgmtCreateCompanyCustomCss" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/CompanyCustomCss" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/Companies/plans": {
      "get": {
        "tags": ["company"],
        "summary": "Get available billing plans provided by taktikal",
        "description": "Get available billing plans provided by taktikal",
        "operationId": "GetCompanyPlansCompaniesplans_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<CompanyPlanType>",
              "type": "array",
              "items": { "type": "string", "x-nullable": false }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/flow/css": {
      "post": {
        "tags": ["flow"],
        "summary": "Create a custom css for a flow",
        "description": "Create a custom css for a flow",
        "operationId": "MgmtCreateFlowCustomCssflowcss_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/MgmtCreateFlowCustomCss" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/FlowCustomCss" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/flow/{FlowKey}": {
      "get": {
        "tags": ["flow"],
        "summary": "Get a flow details by a flow key",
        "description": "Get a flow details by a flow key",
        "operationId": "MgmtGetFlowflowFlowKey_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Flow" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "delete": {
        "tags": ["flow"],
        "summary": "Marks a flow as deleted",
        "description": "Marks a flow as deleted",
        "operationId": "MgmtDeleteFlowflowFlowKey_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Task" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/flow/feedback/": {
      "get": {
        "tags": ["flow"],
        "summary": "Get flow feedback aggregated",
        "description": "Get flow feedback aggregated",
        "operationId": "GetFlowFeedbackStatisticsflowfeedback_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          },
          {
            "name": "FeedbackType",
            "in": "query",
            "description": "Flow feedback type",
            "type": "string",
            "required": false
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "From date in a date range",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "To date in a date range",
            "type": "string",
            "format": "date-time",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<FlowFeedbackStatistics>",
              "type": "array",
              "items": { "$ref": "#/definitions/FlowFeedbackStatistics" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/statistics/signedduration": {
      "get": {
        "tags": ["statistics"],
        "summary": "Get how long the signing process takes to complete",
        "description": "Get how long the signing process takes to complete",
        "operationId": "MgmtSignedTimeStatsFilterstatisticssignedduration_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "The key for a specific flow",
            "type": "string",
            "required": false
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date of the log to be searched, must be a bigger date than StartDate ",
            "type": "string",
            "format": "date-time",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<SignedTimeBracketStatsResponse>",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SignedTimeBracketStatsResponse"
              }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/statistics/distanceandtime": {
      "get": {
        "tags": ["statistics"],
        "summary": "Get the distance and time if the signee would have driven to the closest company address.",
        "description": "Get the distance and time if the signee would have driven to the closest company address.",
        "operationId": "StatsDistanceAndTimeFilterstatisticsdistanceandtime_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date of the log to be searched, must be a bigger date than StartDate ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "name": "FlowKey",
            "in": "query",
            "description": "The key for a specific flow",
            "type": "string",
            "required": false
          },
          {
            "name": "MinDistance",
            "in": "query",
            "description": "The minimum distance traveled in meters",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "MaxDistance",
            "in": "query",
            "description": "The maximum distance traveled in meters",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/StatsDistanceAndTimeResult" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/statistics/user": {
      "get": {
        "tags": ["statistics"],
        "summary": "Gets stats for company or user",
        "description": "Gets stats for company or user",
        "operationId": "MgmtUserStatsFilterstatisticsuser_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "The key for a specific flow",
            "type": "string",
            "required": false
          },
          {
            "name": "User",
            "in": "query",
            "description": "The key for a specific user",
            "type": "string",
            "required": false
          },
          {
            "name": "StartedFrom",
            "in": "query",
            "description": "filter from when process was started, use format yyyy-MM  e.g. 1 dec 2001 should be 2001-12",
            "type": "string",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "StartedTo",
            "in": "query",
            "description": "filter to when process was started, use format yyyy-MM  e.g. 31 dec 2001 should be 2001-12",
            "type": "string",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/StatisticsWrapper" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/webhook/{Id}": {
      "put": {
        "tags": ["webhook"],
        "operationId": "WebhookwebhookId_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The id of a webhook required for update (PUT)",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/Webhook" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Webhook" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "delete": {
        "tags": ["webhook"],
        "summary": "Delete a webhook",
        "description": "Delete a webhook",
        "operationId": "DeleteWebhookwebhookId_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The id of a webhook",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/signing/sequential": {
      "post": {
        "tags": ["signing"],
        "summary": "Creates a new Sequential Signing process (Bulk) with a array of Signing Processes.\n                    Each Signing process has an array of signees.\n                    Example: A company wants document A and B signed. Signee X should sign document A and B, Signee Y should sign document A and Signee Z should sign Document B.\n                    Then A new CreateSequentalSigning with array of two CreateSigningProcess object. Signees X and Y are added as signees for CreateSigningProcess for Document A\n                    and signees X and Z are added as signees for Document B",
        "description": "Creates a new Sequential Signing process (Bulk) with a array of Signing Processes.\n                    Each Signing process has an array of signees.\n                    Example: A company wants document A and B signed. Signee X should sign document A and B, Signee Y should sign document A and Signee Z should sign Document B.\n                    Then A new CreateSequentalSigning with array of two CreateSigningProcess object. Signees X and Y are added as signees for CreateSigningProcess for Document A\n                    and signees X and Z are added as signees for Document B",
        "operationId": "CreateSequentialSigningsigningsequential_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CreateSequentialSigning" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SequentialSigning" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "delete": {
        "tags": ["signing"],
        "summary": "Cancel the sequential signing process",
        "description": "Cancel the sequential signing process",
        "operationId": "CancelSequenceSigningsigningsequential_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "SequenceKey",
            "in": "query",
            "description": "Sequential signing process identifier that has to be provided.",
            "type": "string",
            "required": true
          },
          {
            "name": "User",
            "in": "query",
            "description": "Only the person who started the signing process can cancel it.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SequentialSigning" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/user/contacts": {
      "get": {
        "tags": ["contacts"],
        "summary": "Get user contacts",
        "description": "Get user contacts",
        "operationId": "GetUserContactsusercontacts_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "User",
            "in": "query",
            "description": "The user who owns the group",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UserContacts" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "post": {
        "tags": ["contacts"],
        "summary": "Add a contact for a user",
        "description": "Add a contact for a user",
        "operationId": "CreateUserContactusercontacts_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CreateUserContact" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UserContact" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/Auth": {
      "post": {
        "tags": ["auth"],
        "summary": "Authenticates a user with e-id and returns personal info",
        "description": "\n            Returns a 'Customer' object but with different amount of information filled out depending on the 'LookupType'.\n            If 'LookupType.NameAddressFamily' is selected then the extra values returned will be returned in 'Meta'\n\n            There are three different return types depending on the LookupType\n                1) Name: Will only return the SSN and Name of the authenticated person. This has no additional lookup cost.\n                2) NameAddress: Will return Name, SSN and address information. This has an additional lookup cost. This is the default value if no value is given for LookupType.\n                3) NameAddressFamily: Returns Name, SSN, Address data, gender code, and family information.",
        "operationId": "Auth_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/Auth" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Customer" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/Auth/Start": {
      "post": {
        "tags": ["auth"],
        "summary": "Starts Authentication with a user with his e-id and returns a AuthRequestId that can be used to check if user has finished authenticating",
        "description": "\n            If you are using AuthenticationContextType.Sim then the LoginHint should be an icelandic phone number\n            If you are using AuthenticationContextType.App then the LoginHint should be an SSN\n            and with AuthenticationContextType.App you will also receive a VerificationCode that should be displayed to the user\n            If any failure occured we will throw an error detailing what happened",
        "operationId": "AuthStartStart_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/AuthStart" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/StartAuthResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/Auth/Poll": {
      "post": {
        "tags": ["auth"],
        "summary": "Polls the  Authentication with a user with his e-id and returns the Customer if authentication has finished that can be used to check if the user has finished authenticating",
        "description": "\n            AuthRequestId should be the one returned from /Auth/Start\n            Returns a PollCustomer object that will\n                * if successful have the customer object filled out according to LookupType\n                * if not, customer object will be null and a StatusMessage detailing why\n            If 'LookupType.NameAddressFamily' is selected then the extra values returned will be returned in 'Meta'\n\n            There are three different return types depending on the LookupType\n                1) Name: Will only return the SSN and Name of the authenticated person. This has no additional lookup cost.\n                2) NameAddress: Will return Name, SSN and address information. This has an additional lookup cost. This is the default value if no value is given for LookupType.\n                3) NameAddressFamily: Returns Name, SSN, Address data, gender code, and family information.",
        "operationId": "AuthPollPoll_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/AuthPoll" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PollCustomer" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/Customer/Activity/{Token}": {
      "get": {
        "tags": ["customer"],
        "summary": "To be deprecated",
        "description": "To be deprecated",
        "operationId": "GetCustomerActivityActivityToken_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "Token", "in": "path", "type": "string", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/CustomerActivityLog" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/Customer/{Token}": {
      "get": {
        "tags": ["customer"],
        "summary": "To be deprecated",
        "description": "To be deprecated",
        "operationId": "GetCustomerToken_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "Token", "in": "path", "type": "string", "required": true },
          { "name": "UserAgent", "in": "query", "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Customer" }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": ["customer"],
        "summary": "To be deprecated",
        "description": "To be deprecated",
        "operationId": "UpdateCustomerToken_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "Email", "in": "query", "type": "string" },
          { "name": "Address", "in": "query", "type": "string" },
          { "name": "PostalCode", "in": "query", "type": "string" },
          { "name": "City", "in": "query", "type": "string" },
          { "name": "Token", "in": "path", "type": "string", "required": true },
          { "name": "Meta", "in": "query", "type": "string" },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/UpdateCustomer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Customer" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/Customer/": {
      "post": {
        "tags": ["customer"],
        "summary": "To be deprecated",
        "description": "To be deprecated",
        "operationId": "CreateCustomerRequest_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "Name", "in": "query", "type": "string" },
          { "name": "Ssn", "in": "query", "type": "string" },
          { "name": "PhoneNumber", "in": "query", "type": "string" },
          { "name": "Email", "in": "query", "type": "string" },
          { "name": "Address", "in": "query", "type": "string" },
          { "name": "PostalCode", "in": "query", "type": "string" },
          { "name": "City", "in": "query", "type": "string" },
          { "name": "FlowKey", "in": "query", "type": "string" },
          { "name": "ApiKey", "in": "query", "type": "string" },
          {
            "name": "CommunicationDeliveryType",
            "in": "query",
            "type": "string",
            "enum": ["None", "Sms", "Email"],
            "x-nullable": false
          },
          { "name": "Meta", "in": "query", "type": "string" },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CreateCustomerRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Customer" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/flow/css/{FlowKey}.css": {
      "get": {
        "tags": ["flow"],
        "summary": "Get Flow custom css content",
        "description": "Get Flow custom css content",
        "operationId": "FlowCssContentcssFlowKey.css_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/FlowCustomCss" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/flow/{FlowKey}/branding": {
      "get": {
        "tags": ["flow"],
        "summary": "returns logo and colors for flow",
        "description": "returns logo and colors for flow",
        "operationId": "GetCompanyBrandingFlowKeybranding_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          },
          {
            "name": "ProcessKey",
            "in": "query",
            "description": "The signing process key",
            "type": "string",
            "required": false
          },
          {
            "name": "SequenceKey",
            "in": "query",
            "description": "The sequence signing process key",
            "type": "string",
            "required": false
          },
          {
            "name": "CompanyKey",
            "in": "query",
            "description": "The company key",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Data found",
            "schema": { "$ref": "#/definitions/CompanyBranding" }
          },
          "400": {
            "description": "Invalid key",
            "schema": { "$ref": "#/definitions/CompanyBranding" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/flow/feedback": {
      "post": {
        "tags": ["flow"],
        "summary": "Insert feedback for Flow",
        "description": "Insert feedback for Flow",
        "operationId": "FlowFeedbackfeedback_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/FlowFeedback" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/FlowFeedback" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/flow/{FlowKey}": {
      "get": {
        "tags": ["flow"],
        "summary": "Get array of flow details by key",
        "description": "Get array of flow details by key",
        "operationId": "FlowFilterFlowKey_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<FlowOverview>",
              "type": "array",
              "items": { "$ref": "#/definitions/FlowOverview" }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/flow/company/": {
      "get": {
        "tags": ["flow"],
        "summary": "Get the an array of flow overview details",
        "description": "Get the an array of flow overview details",
        "operationId": "FlowCompanyFiltercompany_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<FlowOverview>",
              "type": "array",
              "items": { "$ref": "#/definitions/FlowOverview" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/flow/Sign": {
      "post": {
        "tags": ["flow"],
        "summary": "To be deprecated",
        "description": "To be deprecated",
        "operationId": "FlowSignSign_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "FlowKey", "in": "query", "type": "string" },
          { "name": "CustomerKey", "in": "query", "type": "string" },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/FlowSign" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SignDocumentResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/flow/{FlowKey}/registered/deliveries": {
      "get": {
        "tags": ["flow"],
        "summary": "Gets all registered delivery methods for this flowKey, email, and webhooks.\n        Will return the types of delivers registered, not the actual content",
        "description": "Gets all registered delivery methods for this flowKey, email, and webhooks.\n        Will return the types of delivers registered, not the actual content",
        "operationId": "GetFlowDeliveriesFlowKeyregistereddeliveries_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/FlowDeliveries" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/HasCertificate/Key/{FlowKey}/Phone/{Phone}/Ssn/{Ssn}": {
      "get": {
        "tags": ["flow"],
        "summary": "Check if a person has a valid e-id providing ssn and phone number",
        "description": "Check if a person has a valid e-id providing ssn and phone number",
        "operationId": "HasCertificateHasCertificateKeyFlowKeyPhonePhoneSsnSsn_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Phone",
            "in": "path",
            "description": "The phone number of a person to check",
            "type": "string",
            "required": true
          },
          {
            "name": "Ssn",
            "in": "path",
            "description": "The ssn (kennitala) of a person to check",
            "type": "string",
            "required": true
          },
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/HasCertificateResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/status/processkey/{ProcessKey}/signeekey/{SigneeKey}/token/{Token}/": {
      "get": {
        "tags": ["signing"],
        "summary": "Checks the status of the document and returns it if it's signed",
        "description": "You most likely will not need using this endpoint. It's used by the frontend but can be used if your have your own UI.",
        "operationId": "SignDocumentStatusRequeststatusprocesskeyProcessKeysigneekeySigneeKeytokenToken_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "Token", "in": "path", "type": "string", "required": true },
          {
            "name": "ProcessKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SignDocumentStatusResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/flow/HasCertificate/Key/{FlowKey}/Phone/{Phone}/Ssn/{Ssn}": {
      "get": {
        "tags": ["flow"],
        "summary": "Check if a person has a valid e-id providing ssn and phone number",
        "description": "Check if a person has a valid e-id providing ssn and phone number",
        "operationId": "HasCertificateHasCertificateKeyFlowKeyPhonePhoneSsnSsn2_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Phone",
            "in": "path",
            "description": "The phone number of a person to check",
            "type": "string",
            "required": true
          },
          {
            "name": "Ssn",
            "in": "path",
            "description": "The ssn (kennitala) of a person to check",
            "type": "string",
            "required": true
          },
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/HasCertificateResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/company/css/company.css": {
      "get": {
        "tags": ["company"],
        "summary": "Get the custom css for a company",
        "description": "Get the custom css for a company",
        "operationId": "MgmtCompanyCssContentcompanycsscompany.css_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/CompanyCustomCss" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/company/css/List": {
      "get": {
        "tags": ["company"],
        "summary": "Get custom company css history",
        "description": "Get custom company css history",
        "operationId": "MgmtCompanyCustomCssListFiltercompanycssList_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<CompanyCustomCssListItem>",
              "type": "array",
              "items": { "$ref": "#/definitions/CompanyCustomCssListItem" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/company/publickey/{CompanyKey}": {
      "get": {
        "tags": ["company"],
        "summary": "Get the company public key, used for environmental widget for instance",
        "description": "Get the company public key, used for environmental widget for instance",
        "operationId": "GetCompanyPublicKeycompanypublickeyCompanyKey_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "CompanyKey",
            "in": "path",
            "description": "The company key",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "title": "String", "type": "string" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/flow/css/{FlowKey}.css": {
      "get": {
        "tags": ["flow"],
        "summary": "Get the css content for a flow",
        "description": "Get the css content for a flow",
        "operationId": "MgmtFlowCssContentflowcssFlowKey.css_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/FlowCustomCss" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/webhook/flowKey/{FlowKey}": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get a webhook for a flow",
        "description": "Get a webhook for a flow",
        "operationId": "GetWebhookswebhookflowKeyFlowKey_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The flowKey to get all webhooks for",
            "type": "string",
            "required": true
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Can be empty to get all webhooks",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<Webhook>",
              "type": "array",
              "items": { "$ref": "#/definitions/Webhook" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/user/contacts/groups": {
      "post": {
        "tags": ["contacts"],
        "summary": "Add a contact group",
        "description": "Add a contact group",
        "operationId": "CreateUserContactGroupusercontactsgroups_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CreateUserContactGroup" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UserContactGroup" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/user/contacts/{Id}": {
      "put": {
        "tags": ["contacts"],
        "summary": "Update a contact",
        "description": "Update a contact",
        "operationId": "UpdateUserContactusercontactsId_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The id of the contact",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/UpdateUserContact" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UserContact" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "delete": {
        "tags": ["contacts"],
        "summary": "Delete a user contact",
        "description": "Delete a user contact",
        "operationId": "DeleteUserContactusercontactsId_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The id of the contact",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "User",
            "in": "query",
            "description": "The user who owns the group",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Object" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/company/{CompanyKey}/publickey": {
      "get": {
        "tags": ["company"],
        "summary": "Get the company public key, used for environmental widget for instance",
        "description": "Get the company public key, used for environmental widget for instance",
        "operationId": "GetCompanyPublicKeyCompanyKeypublickey_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "CompanyKey",
            "in": "path",
            "description": "The company key",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "title": "String", "type": "string" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/company/{CompanyKey}/branding": {
      "get": {
        "tags": ["company"],
        "summary": "returns logo and colors for a given companyKey",
        "description": "returns logo and colors for a given companyKey",
        "operationId": "GetCompanyBrandingCompanyKeybranding_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "The key for a specific flow",
            "type": "string",
            "required": false
          },
          {
            "name": "ProcessKey",
            "in": "query",
            "description": "The signing process key",
            "type": "string",
            "required": false
          },
          {
            "name": "SequenceKey",
            "in": "query",
            "description": "The sequence signing process key",
            "type": "string",
            "required": false
          },
          {
            "name": "CompanyKey",
            "in": "path",
            "description": "The company key",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Data found",
            "schema": { "$ref": "#/definitions/CompanyBranding" }
          },
          "400": {
            "description": "Invalid key",
            "schema": { "$ref": "#/definitions/CompanyBranding" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/flow/css/{FlowKey}/List": {
      "get": {
        "tags": ["flow"],
        "summary": "Get custom css for a flow",
        "description": "Get custom css for a flow",
        "operationId": "MgmtFlowCustomCssListFilterflowcssFlowKeyList_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "path",
            "description": "The key for a specific flow",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "List<FlowCustomCssListItem>",
              "type": "array",
              "items": { "$ref": "#/definitions/FlowCustomCssListItem" }
            }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/user/contacts/groups/{Id}": {
      "put": {
        "tags": ["contacts"],
        "summary": "Edit a contact group",
        "description": "Edit a contact group",
        "operationId": "UpdateUserContactGroupusercontactsgroupsId_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The Id of the group",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/UpdateUserContactGroup" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UserContactGroup" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "delete": {
        "tags": ["contacts"],
        "summary": "Deletes a contact group",
        "description": "Deletes a contact group",
        "operationId": "DeleteUserContactGroupusercontactsgroupsId_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The Id of the group",
            "type": "integer",
            "format": "int32",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UserContacts" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/pdf/{CustomerKey}.pdf": {
      "get": {
        "tags": ["pdf"],
        "summary": "Get customer pdf file, To be deprecated",
        "description": "Get customer pdf file, To be deprecated",
        "operationId": "GetPdfForPreviewCustomerKey.pdf_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "CustomerKey",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GetPdfForPreviewResponse" }
          }
        },
        "deprecated": false
      },
      "head": {
        "tags": ["pdf"],
        "summary": "Get customer pdf file, To be deprecated",
        "description": "Get customer pdf file, To be deprecated",
        "operationId": "GetPdfForPreviewCustomerKey.pdf",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "CustomerKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/GetPdfForPreview" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GetPdfForPreviewResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/pdf/CheckDocumentSigners/": {
      "post": {
        "tags": ["pdf"],
        "summary": "Checks if a document can be signed and if it can it returns a list of signatures already in the document, if any.\nIf the PDF is encrypted it returns an error.\nIf the PDF is corrupted it returns an error",
        "description": "Checks if a document can be signed and if it can it returns a list of signatures already in the document, if any.\nIf the PDF is encrypted it returns an error.\nIf the PDF is corrupted it returns an error",
        "operationId": "CheckDocumentSigningRequestCheckDocumentSigners_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CheckDocumentSigningRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/CheckDocumentSigningResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/pdf/signed/{CustomerKey}.pdf": {
      "get": {
        "tags": ["pdf"],
        "summary": "Get customer pdf file, To be deprecated",
        "description": "Get customer pdf file, To be deprecated",
        "operationId": "GetSignedPdfsignedCustomerKey.pdf_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "CustomerKey",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Object" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/pdf/{ProcessKey}/{SigneeKey}.pdf": {
      "get": {
        "tags": ["pdf"],
        "summary": "Get a pdf document for a preview before signing",
        "description": "Get a pdf document for a preview before signing",
        "operationId": "GetPdfForSigningProcessPreviewProcessKeySigneeKey.pdf_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "The signing process key provided when create a signing process",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "description": "The signee key representing a signer of the document ",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GetPdfForPreviewResponse" }
          }
        },
        "deprecated": false
      },
      "head": {
        "tags": ["pdf"],
        "summary": "Get a pdf document for a preview before signing",
        "description": "Get a pdf document for a preview before signing",
        "operationId": "GetPdfForSigningProcessPreviewProcessKeySigneeKey.pdf",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "The signing process key provided when create a signing process",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "description": "The signee key representing a signer of the document ",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/GetPdfForSigningProcessPreview" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GetPdfForPreviewResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/pdf/sp/{ProcessKey}.pdf": {
      "get": {
        "tags": ["pdf"],
        "summary": "Get a pdf document with authentication for a preview before signing",
        "description": "Get a pdf document with authentication for a preview before signing",
        "operationId": "GetPdfForSigningProcessPreviewAuthspProcessKey.pdf_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "The signing process key provided when create a signing process",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GetPdfForPreviewResponse" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/sequential/{SequenceKey}/signee/{SequentialSigneeKey}": {
      "get": {
        "tags": ["signing"],
        "operationId": "GetSequentialSigningsequentialSequenceKeysigneeSequentialSigneeKey_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "SequenceKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "SequentialSigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SequentialSigning" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/{ProcessKey}/signee/{SigneeKey}/attachment": {
      "post": {
        "tags": ["signing process attachment"],
        "summary": "Adds a new attachment to the signingProcess. Reads the attachment from the form-data",
        "description": "Adds a new attachment to the signingProcess. Reads the attachment from the form-data",
        "operationId": "CreateAttachmentReferenceProcessKeysigneeSigneeKeyattachment_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "The signing process key",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "description": "The person who is signing key",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CreateAttachmentReference" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AttachmentReference" }
          },
          "400": {
            "description": "No files in request | More than one File in request. Please only send one file at a time",
            "schema": { "$ref": "#/definitions/AttachmentReference" }
          },
          "406": {
            "description": "Can't add an attachment to a none active signingProcess",
            "schema": { "$ref": "#/definitions/AttachmentReference" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/sign/{ProcessKey}/signee/{SigneeKey}": {
      "post": {
        "tags": ["signing"],
        "summary": "Starts the signin process for a given SigneeKey",
        "description": "Starts the signin process for a given SigneeKey",
        "operationId": "RequestToSignsignProcessKeysigneeSigneeKey_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "The signing process key",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "description": "The person who is signing key",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/RequestToSign" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SignDocumentResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/{ProcessKey}/signee/{SigneeKey}/meta": {
      "put": {
        "tags": ["signing"],
        "summary": "Updates the signingProcess meta object. Will merge with the current value",
        "description": "Updates the signingProcess meta object. Will merge with the current value",
        "operationId": "UpdateSigningProcessMetaProcessKeysigneeSigneeKeymeta_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/UpdateSigningProcessMeta" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SigningProcess" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/sequential/{SequenceKey}/branding": {
      "get": {
        "tags": ["signing"],
        "summary": "returns logo and colors for the sequence",
        "description": "returns logo and colors for the sequence",
        "operationId": "GetCompanyBrandingsequentialSequenceKeybranding_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "FlowKey",
            "in": "query",
            "description": "The key for a specific flow",
            "type": "string",
            "required": false
          },
          {
            "name": "ProcessKey",
            "in": "query",
            "description": "The signing process key",
            "type": "string",
            "required": false
          },
          {
            "name": "SequenceKey",
            "in": "path",
            "description": "The sequence signing process key",
            "type": "string",
            "required": true
          },
          {
            "name": "CompanyKey",
            "in": "query",
            "description": "The company key",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Data found",
            "schema": { "$ref": "#/definitions/CompanyBranding" }
          },
          "400": {
            "description": "Invalid key",
            "schema": { "$ref": "#/definitions/CompanyBranding" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/{ProcessKey}/signee/{SigneeKey}": {
      "get": {
        "tags": ["signing"],
        "summary": "Get's the signing process by signeeKey",
        "description": "Get's the signing process by signeeKey",
        "operationId": "GetSigningProcessBySigneeProcessKeysigneeSigneeKey_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          { "name": "UserAgent", "in": "query", "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SigningProcess" }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": ["signing"],
        "summary": "Update a Signee",
        "description": "Update a Signee",
        "operationId": "UpdateSigneeProcessKeysigneeSigneeKey_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "SigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "ProcessKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/UpdateSignee" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Signee" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/simple/bulk/imageData": {
      "post": {
        "tags": ["signing"],
        "summary": "Saves the signatureImage that will be included in all the PDFs in this sequence/bulk",
        "description": "Saves the signatureImage that will be included in all the PDFs in this sequence/bulk",
        "operationId": "CreateSimpleSignatureBulkImageRequestsimplebulkimageData_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "SequenceKey", "in": "query", "type": "string" },
          { "name": "SequenceSigneeKey", "in": "query", "type": "string" },
          {
            "name": "Image",
            "in": "query",
            "type": "string",
            "format": "byte",
            "x-nullable": false
          },
          {
            "name": "ImageWidth",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "ImageHeight",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "ImageXInsetFac",
            "in": "query",
            "type": "number",
            "format": "double",
            "x-nullable": false
          },
          {
            "name": "ImageYBaselineFac",
            "in": "query",
            "type": "number",
            "format": "double",
            "x-nullable": false
          },
          {
            "name": "ImageWidthFac",
            "in": "query",
            "type": "number",
            "format": "double",
            "x-nullable": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSimpleSignatureBulkImageRequest"
            }
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/simple/otp/bulk": {
      "get": {
        "tags": ["signing"],
        "summary": "Proved the OTP code to sign documents in bulk. Returns the the status of the request.\n                     The document's are only delivered by email or webhook",
        "description": "Proved the OTP code to sign documents in bulk. Returns the the status of the request.\n                     The document's are only delivered by email or webhook",
        "operationId": "SimpleSigningOtpBulkRequestsimpleotpbulk_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Token",
            "in": "query",
            "type": "string",
            "required": true
          },
          { "name": "OTP", "in": "query", "type": "string", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SimpleSigningOtpBulkResponse" }
          },
          "400": {
            "description": "Token not found | Incorrect OTP code | Token expired",
            "schema": { "$ref": "#/definitions/SimpleSigningOtpBulkResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/sequential/{SequenceKey}/signee/{SequentialSigneeKey}/Token": {
      "post": {
        "tags": ["signing"],
        "summary": "Creates an Access Token that is valid for this signingProcess",
        "description": "Creates an Access Token that is valid for this signingProcess",
        "operationId": "CreateSequenceAccessTokensequentialSequenceKeysigneeSequentialSigneeKeyToken_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "SequenceKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "SequentialSigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CreateSequenceAccessToken" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/TaktikalAccessToken" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/{ProcessKey}/attachment/{Id}/fileName/{FileName}": {
      "get": {
        "tags": ["signing process attachment"],
        "summary": "Gets an attachment with a given Id for a given signingProcess",
        "description": "Gets an attachment with a given Id for a given signingProcess",
        "operationId": "GetAttachmentProcessKeyattachmentIdfileNameFileName_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The id of the reference ",
            "type": "string",
            "required": true
          },
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "The signing process key",
            "type": "string",
            "required": true
          },
          {
            "name": "FileName",
            "in": "path",
            "description": "The filename including the type",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Object" }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": ["signing process attachment"],
        "summary": "Deletes an attachment for a signingProcess",
        "description": "Deletes an attachment for a signingProcess",
        "operationId": "DeleteAttachmentReferenceProcessKeyattachmentIdfileNameFileName_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The id of the reference to be deleted",
            "type": "string",
            "required": true
          },
          {
            "name": "ProcessKey",
            "in": "path",
            "description": "The signing process key",
            "type": "string",
            "required": true
          },
          {
            "name": "FileName",
            "in": "path",
            "description": "The filename including the type",
            "type": "string",
            "required": true
          }
        ],
        "responses": { "204": { "description": "No Content" } },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/{ProcessKey}": {
      "post": {
        "tags": ["signing"],
        "summary": "Authenticate a signee into a signing process",
        "description": "Will return a base64Encoded AccessToken in the header x-access-token.\nThan is needed to access the signingProcess and the document",
        "operationId": "RequestToViewProcessKey_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          { "name": "PhoneNumber", "in": "query", "type": "string" },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/RequestToView" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SigningProcess" }
          },
          "401": {
            "description": "Data found",
            "schema": { "$ref": "#/definitions/SigningProcess" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/signing/{ProcessKey}/signee/{SigneeKey}/remind": {
      "post": {
        "tags": ["signing"],
        "summary": "Sends a reminder to the signee telling him he needs to sign.\nIf this process is part of a sequence a reminder for the sequence is sent instead.",
        "description": "Sends a reminder to the signee telling him he needs to sign.\nIf this process is part of a sequence a reminder for the sequence is sent instead.",
        "operationId": "SigningRemindersigningProcessKeysigneeSigneeKeyremind_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          { "name": "User", "in": "query", "type": "string" },
          {
            "name": "CommunicationDeliveryType",
            "in": "query",
            "type": "string",
            "enum": ["None", "Sms", "Email"],
            "x-nullable": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/SigningReminder" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "title": "String", "type": "string" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/management/signing/{ProcessKey}/signee/{SigneeKey}/token": {
      "post": {
        "tags": ["signing"],
        "summary": "Creates an Access Token that is valid for this signingProcess",
        "description": "Creates an Access Token that is valid for this signingProcess",
        "operationId": "CreateSigningProcessTokensigningProcessKeysigneeSigneeKeytoken_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ProcessKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "SigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/CreateSigningProcessToken" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Object" }
          }
        },
        "deprecated": false,
        "security": [{ "basic": [] }]
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/signing/sign/simple/sequence/{SequenceKey}/signee/{SequentialSigneeKey}": {
      "post": {
        "tags": ["signing"],
        "summary": "Bulk sign all documents that this signee has in this sequence",
        "description": "Bulk sign all documents that this signee has in this sequence",
        "operationId": "RequestToBulkSignsignsimplesequenceSequenceKeysigneeSequentialSigneeKey_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "SequenceKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "SequentialSigneeKey",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/RequestToBulkSign" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/BulkSignDocumentResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/statistics/distanceandtime": {
      "get": {
        "tags": ["statistics"],
        "summary": "Get the distance and time if the signee would have driven to the closest company address. Aggregated for all companies.",
        "description": "Get the distance and time if the signee would have driven to the closest company address. Aggregated for all companies.",
        "operationId": "GlobalStatsDistanceAndTimeFilterdistanceandtime_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date of the log to be searched, must be a bigger date than StartDate ",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "name": "MinDistance",
            "in": "query",
            "description": "The minimum distance traveled in meters",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "MaxDistance",
            "in": "query",
            "description": "The maximum distance traveled in meters",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/StatsDistanceAndTimeResult" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/statistics/company/distanceandtime": {
      "get": {
        "tags": ["statistics"],
        "summary": "Get the distance and time if the signee would have driven to the closest company address. For a single company.",
        "description": "Get the distance and time if the signee would have driven to the closest company address. For a single company.",
        "operationId": "CompanyStatsDistanceAndTimeFiltercompanydistanceandtime_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "PublicCompanyKey",
            "in": "query",
            "description": "The public company key that is provided in app.taktikal",
            "type": "string",
            "required": true
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date of the log to be searched, must be a bigger date than StartDate ",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "name": "MinDistance",
            "in": "query",
            "description": "The minimum distance traveled in meters",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "name": "MaxDistance",
            "in": "query",
            "description": "The maximum distance traveled in meters",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/StatsDistanceAndTimeResult" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/users/verifyemail": {
      "get": {
        "tags": ["users"],
        "summary": "Verifies the email for the given users' id",
        "description": "Verifies the email for the given users' id",
        "operationId": "VerifyEmailverifyemail_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "Id", "in": "url", "type": "string", "required": true },
          {
            "name": "Token",
            "in": "url",
            "type": "string",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/Object" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/validation/": {
      "post": {
        "tags": ["validation"],
        "summary": "Validate a signed document",
        "description": "Validate a signed document",
        "operationId": "ValidateRequest_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/ValidateRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ValidateResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/ss-auth": {
      "get": {
        "tags": ["auth"],
        "summary": "Sign In",
        "description": "Sign In",
        "operationId": "Authenticate_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "AuthProvider, e.g. credentials",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AuthenticateResponse" }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": ["auth"],
        "summary": "Sign In",
        "description": "Sign In",
        "operationId": "Authenticate_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "AuthProvider, e.g. credentials",
            "type": "string",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/Authenticate" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AuthenticateResponse" }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": ["auth"],
        "summary": "Sign In",
        "description": "Sign In",
        "operationId": "Authenticate_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "AuthProvider, e.g. credentials",
            "type": "string",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/Authenticate" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AuthenticateResponse" }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": ["auth"],
        "summary": "Sign In",
        "description": "Sign In",
        "operationId": "Authenticate_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "AuthProvider, e.g. credentials",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AuthenticateResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    },
    "/ss-auth/{provider}": {
      "get": {
        "tags": ["auth"],
        "summary": "Sign In",
        "description": "Sign In",
        "operationId": "Authenticateprovider_Get",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "AuthProvider, e.g. credentials",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AuthenticateResponse" }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": ["auth"],
        "summary": "Sign In",
        "description": "Sign In",
        "operationId": "Authenticateprovider_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "AuthProvider, e.g. credentials",
            "type": "string",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/Authenticate" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AuthenticateResponse" }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": ["auth"],
        "summary": "Sign In",
        "description": "Sign In",
        "operationId": "Authenticateprovider_Post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "AuthProvider, e.g. credentials",
            "type": "string",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "schema": { "$ref": "#/definitions/Authenticate" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AuthenticateResponse" }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": ["auth"],
        "summary": "Sign In",
        "description": "Sign In",
        "operationId": "Authenticateprovider_Delete",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "AuthProvider, e.g. credentials",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AuthenticateResponse" }
          }
        },
        "deprecated": false
      },
      "parameters": [{ "$ref": "#/parameters/Accept" }]
    }
  },
  "definitions": {
    "Object": { "properties": {}, "description": "Object", "type": "object" },
    "GetSigningProcessActivity": {
      "title": "GetSigningProcessActivity",
      "required": ["StartDate", "EndDate", "ProcessKey"],
      "properties": {
        "User": { "description": "The email of the user", "type": "string" },
        "StartDate": {
          "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "EndDate": {
          "description": "End date of the log to be searched, must be a bigger date than StartDate ",
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "ProcessKey": {
          "description": "Use if to be filtered on a single signing process",
          "type": "string"
        },
        "FlowType": {
          "description": "Can be used to only get activity for a specific flow type.",
          "type": "string",
          "enum": ["RenderFlow", "DropAndSign", "FillAndSign", "PEP"]
        },
        "Take": {
          "description": "used to page the result set and only return N many results",
          "type": "integer",
          "format": "int32"
        },
        "Skip": {
          "description": "used to page the result set and skip the first N results",
          "type": "integer",
          "format": "int32"
        },
        "FlowKey": {
          "description": "If it has a value we only return records that match this flowKey",
          "type": "string"
        }
      },
      "description": "GetSigningProcessActivity",
      "type": "object"
    },
    "GetSigningProcessActivityForUser": {
      "title": "GetSigningProcessActivityForUser",
      "required": ["StartDate", "EndDate"],
      "properties": {
        "User": { "description": "The email of the user", "type": "string" },
        "StartDate": {
          "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "EndDate": {
          "description": "End date of the log to be searched, must be a bigger date than StartDate ",
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "ProcessKey": {
          "description": "Use if to be filtered on a single signing process",
          "type": "string"
        },
        "FlowType": {
          "description": "Can be used to only get activity for a specific flow type.",
          "type": "string",
          "enum": ["RenderFlow", "DropAndSign", "FillAndSign", "PEP"]
        },
        "Take": {
          "description": "used to page the result set and only return N many results",
          "type": "integer",
          "format": "int32"
        },
        "Skip": {
          "description": "used to page the result set and skip the first N results",
          "type": "integer",
          "format": "int32"
        },
        "FlowKey": {
          "description": "If it has a value we only return records that match this flowKey",
          "type": "string"
        }
      },
      "description": "GetSigningProcessActivityForUser",
      "type": "object"
    },
    "GetSigningProcessActivityByCompany": {
      "title": "GetSigningProcessActivityByCompany",
      "required": ["StartDate", "EndDate"],
      "properties": {
        "StartDate": {
          "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "EndDate": {
          "description": "End date of the log to be searched, must be a bigger date than StartDate ",
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "Take": {
          "description": "used to page the result set and only return N many results",
          "type": "integer",
          "format": "int32"
        },
        "Skip": {
          "description": "used to page the result set and skip the first N results",
          "type": "integer",
          "format": "int32"
        },
        "User": { "description": "The email of the user", "type": "string" },
        "FlowType": {
          "description": "Can be used to only get activity for a specific flow type.",
          "type": "string",
          "enum": ["RenderFlow", "DropAndSign", "FillAndSign", "PEP"]
        },
        "FlowKey": {
          "description": "If it has a value we only return records that match this flowKey",
          "type": "string"
        }
      },
      "description": "GetSigningProcessActivityByCompany",
      "type": "object"
    },
    "RequestToViewSequence": {
      "title": "RequestToViewSequence",
      "required": ["SequenceKey", "PhoneNumber"],
      "properties": {
        "SequenceKey": {
          "description": "Sequential signing process identifier that has to be provided.",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "Sequential signee phone number",
          "type": "string"
        }
      },
      "description": "RequestToViewSequence",
      "type": "object"
    },
    "GetCompanyBranding": {
      "title": "GetCompanyBranding",
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        },
        "ProcessKey": {
          "description": "The signing process key",
          "type": "string"
        },
        "SequenceKey": {
          "description": "The sequence signing process key",
          "type": "string"
        },
        "CompanyKey": { "description": "The company key", "type": "string" }
      },
      "description": "GetCompanyBranding",
      "type": "object"
    },
    "SimpleSigningOtpRequest": {
      "title": "SimpleSigningOtpRequest",
      "required": ["Token", "OTP"],
      "properties": {
        "Token": { "type": "string" },
        "OTP": { "type": "string" }
      },
      "description": "SimpleSigningOtpRequest",
      "type": "object"
    },
    "CreateSimpleSignatureImageRequest": {
      "title": "CreateSimpleSignatureImageRequest",
      "properties": {
        "ProcessKey": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "Image": { "type": "string", "format": "byte", "x-nullable": false },
        "ImageWidth": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ImageHeight": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ImageXInsetFac": {
          "type": "number",
          "format": "double",
          "x-nullable": false
        },
        "ImageYBaselineFac": {
          "type": "number",
          "format": "double",
          "x-nullable": false
        },
        "ImageWidthFac": {
          "type": "number",
          "format": "double",
          "x-nullable": false
        }
      },
      "description": "CreateSimpleSignatureImageRequest",
      "type": "object"
    },
    "MgmtListApiKeys": {
      "title": "MgmtListApiKeys",
      "properties": {},
      "description": "MgmtListApiKeys",
      "type": "object"
    },
    "MgmtCreateApiKey": {
      "title": "MgmtCreateApiKey",
      "properties": {
        "Name": { "type": "string" },
        "Permissions": {
          "type": "array",
          "items": { "$ref": "#/definitions/ApiKeyPermission" }
        }
      },
      "description": "MgmtCreateApiKey",
      "type": "object"
    },
    "ApiKeyPermission": {
      "title": "ApiKeyPermission",
      "properties": {
        "ApiKeyId": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ApiResource": { "type": "string" },
        "Flows": { "type": "array", "items": { "type": "string" } },
        "Verbs": { "type": "array", "items": { "type": "string" } }
      },
      "description": "ApiKeyPermission",
      "type": "object"
    },
    "MgmtGetEmailTemplates": {
      "title": "MgmtGetEmailTemplates",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "Flow key associated with the email template ",
          "type": "string"
        }
      },
      "description": "MgmtGetEmailTemplates",
      "type": "object"
    },
    "MgmtCreateEmailTemplate": {
      "title": "MgmtCreateEmailTemplate",
      "required": ["FlowKey", "To", "Subject", "IncludeFiles", "TemplateType"],
      "properties": {
        "FlowKey": {
          "description": "Flow key associated with the email template ",
          "type": "string"
        },
        "To": {
          "description": "Email address or placeholder that the email will be sent to. Example placeholder is {{customer.email}}",
          "type": "string"
        },
        "Bcc": {
          "description": "Bcc email address or placeholder that the email will be sent to. Example placeholder is {{customer.email}}",
          "type": "string"
        },
        "Subject": {
          "description": "Subject of the email template. Minimum 10 letters",
          "type": "string"
        },
        "Message": { "description": "Email body.", "type": "string" },
        "IncludeFiles": {
          "description": "Should attachments such as signed document be included.",
          "type": "boolean",
          "x-nullable": false
        },
        "TemplateType": {
          "description": "What type of email template is being updated",
          "type": "string",
          "enum": [
            "NotSet",
            "Notification",
            "Confirmation",
            "SalesPerson",
            "Signup",
            "Canceled",
            "Expired",
            "NewUser",
            "Reminder",
            "CompanyTermination",
            "EmailVerification",
            "MagicLink"
          ]
        },
        "LinkText": {
          "description": "Button/link text in emails to open the signature page",
          "type": "string"
        }
      },
      "description": "MgmtCreateEmailTemplate",
      "type": "object"
    },
    "MgmtUpdateEmailTemplate": {
      "title": "MgmtUpdateEmailTemplate",
      "required": ["FlowKey", "Id", "To", "Subject", "TemplateType"],
      "properties": {
        "FlowKey": {
          "description": "Flow key associated with the email template ",
          "type": "string"
        },
        "Id": {
          "description": "Id of the email template",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "To": {
          "description": "Email address or placeholder that the email will be sent to. Example placeholder is {{customer.email}}",
          "type": "string"
        },
        "Bcc": {
          "description": "Bcc email address or placeholder that the email will be sent to. Example placeholder is {{customer.email}}",
          "type": "string"
        },
        "Subject": {
          "description": "Subject of the email template. Minimum 10 letters",
          "type": "string"
        },
        "Message": { "description": "Email body.", "type": "string" },
        "TemplateType": {
          "description": "What type of email template is being updated",
          "type": "string"
        },
        "LinkText": {
          "description": "Button/link text in emails to open the signature page",
          "type": "string"
        }
      },
      "description": "MgmtUpdateEmailTemplate",
      "type": "object"
    },
    "MgmtDeleteEmailTemplate": {
      "title": "MgmtDeleteEmailTemplate",
      "required": ["FlowKey", "Id"],
      "properties": {
        "FlowKey": {
          "description": "Flow key associated with the email template",
          "type": "string"
        },
        "Id": {
          "description": "Id of the email template",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        }
      },
      "description": "MgmtDeleteEmailTemplate",
      "type": "object"
    },
    "MgmtFlowFilter": {
      "title": "MgmtFlowFilter",
      "properties": {},
      "description": "MgmtFlowFilter",
      "type": "object"
    },
    "MgmtCreateFlow": {
      "title": "MgmtCreateFlow",
      "required": [
        "Name",
        "Description",
        "Active",
        "Contract",
        "ContractValues",
        "ContractValuesAsString",
        "AuthDisplayText",
        "ContractAcceptanceText",
        "ContractViewType",
        "Type",
        "ProductType"
      ],
      "properties": {
        "Name": { "description": "Name of the flow", "type": "string" },
        "Description": {
          "description": "Short description of the flow",
          "type": "string"
        },
        "Active": {
          "description": "Is the flow active true|false ",
          "type": "boolean",
          "x-nullable": false
        },
        "Contract": {
          "description": "The contract is the main content of a flow if the type  of FlowType else this will be ignored",
          "type": "string"
        },
        "ContractValues": {
          "description": "Placeholders that can be replaced",
          "type": "array",
          "items": { "type": "string" }
        },
        "ContractValuesAsString": {
          "description": "Placeholders that can be replaced as a string",
          "type": "string"
        },
        "AuthDisplayText": {
          "description": "The text shown when authenticating into a flow as by Auðkenni",
          "type": "string"
        },
        "ContractAcceptanceText": {
          "description": "The contract acceptance text. Typically the terms and conditions",
          "type": "string"
        },
        "ContractViewType": {
          "description": "Set the view of the contract. HTML|PDF",
          "type": "string"
        },
        "Type": {
          "description": "The flow type",
          "type": "string",
          "enum": ["RenderFlow", "DropAndSign", "FillAndSign", "PEP"]
        },
        "CanHaveAttachments": {
          "description": "Can the flow have attachments",
          "type": "boolean",
          "x-nullable": false
        },
        "MinNumberOfAttachments": {
          "description": "How many attachments dose this flow allow",
          "type": "integer",
          "format": "int32"
        },
        "ProductType": {
          "description": "The product type",
          "type": "string",
          "enum": [
            "Default",
            "AmlKyc",
            "Pep",
            "DocumentScanning",
            "Seal",
            "TextSmartForm"
          ]
        },
        "InitiatedType": {
          "description": "Where is the signing process started for a flow",
          "type": "string",
          "enum": ["NotSet", "Signee", "Employee", "SigneeOrEmployee"]
        },
        "MaxAdditionalSignees": {
          "description": "How many signees can there be",
          "type": "integer",
          "format": "int32"
        },
        "MinAdditionalSignees": {
          "description": "Minimum additional signees",
          "type": "integer",
          "format": "int32"
        },
        "ActivityDisplayName": {
          "description": "Template for activitylog",
          "type": "string"
        },
        "SignatureType": { "type": "string" },
        "LanguageType": { "type": "string" }
      },
      "description": "MgmtCreateFlow",
      "type": "object"
    },
    "MgmtUpdateFlow": {
      "title": "MgmtUpdateFlow",
      "required": [
        "Key",
        "Name",
        "Description",
        "Active",
        "Contract",
        "ContractValues",
        "ContractValuesAsString",
        "AuthDisplayText",
        "ContractAcceptanceText",
        "ContractViewType",
        "Type",
        "ProductType"
      ],
      "properties": {
        "Key": { "description": "The key for the flow", "type": "string" },
        "Name": { "description": "Name of the flow", "type": "string" },
        "Description": {
          "description": "Short description of the flow",
          "type": "string"
        },
        "Active": {
          "description": "Is the flow active true|false ",
          "type": "boolean",
          "x-nullable": false
        },
        "Contract": {
          "description": "The contract is the main content of a flow if the type  of FlowType else this will be ignored",
          "type": "string"
        },
        "ContractValues": {
          "description": "Placeholders that can be replaced",
          "type": "array",
          "items": { "type": "string" }
        },
        "ContractValuesAsString": {
          "description": "Placeholders that can be replaced as a string",
          "type": "string"
        },
        "AuthDisplayText": {
          "description": "The text shown when authenticating into a flow as by Auðkenni",
          "type": "string"
        },
        "ContractAcceptanceText": {
          "description": "The contract acceptance text. Typically the terms and conditions",
          "type": "string"
        },
        "ContractViewType": {
          "description": "Set the view of the contract. HTML|PDF",
          "type": "string"
        },
        "Type": {
          "description": "The flow type",
          "type": "string",
          "enum": ["RenderFlow", "DropAndSign", "FillAndSign", "PEP"]
        },
        "CanHaveAttachments": {
          "description": "Can the flow have attachments",
          "type": "boolean",
          "x-nullable": false
        },
        "MinNumberOfAttachments": {
          "description": "How many attachments dose this flow allow",
          "type": "integer",
          "format": "int32"
        },
        "ProductType": {
          "description": "The product type",
          "type": "string",
          "enum": [
            "Default",
            "AmlKyc",
            "Pep",
            "DocumentScanning",
            "Seal",
            "TextSmartForm"
          ]
        },
        "InitiatedType": {
          "description": "Where is the signing process started for a flow",
          "type": "string",
          "enum": ["NotSet", "Signee", "Employee", "SigneeOrEmployee"]
        },
        "MaxAdditionalSignees": {
          "description": "How many signees can there be",
          "type": "integer",
          "format": "int32"
        },
        "MinAdditionalSignees": {
          "description": "Minimum additional signees",
          "type": "integer",
          "format": "int32"
        },
        "ActivityDisplayName": {
          "description": "Template for activitylog",
          "type": "string"
        },
        "Deleted": { "description": "Is flow deleted", "type": "boolean" },
        "SignatureType": { "type": "string" },
        "LanguageType": { "type": "string" }
      },
      "description": "MgmtUpdateFlow",
      "type": "object"
    },
    "MgmtFlowUsageStatsFilter": {
      "title": "MgmtFlowUsageStatsFilter",
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        },
        "StartDate": {
          "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "description": "End date of the log to be searched, must be a bigger date than StartDate ",
          "type": "string",
          "format": "date-time"
        },
        "Statuses": {
          "description": "List of signing process statuses ",
          "type": "array",
          "items": { "type": "string" }
        },
        "FlowTypes": {
          "description": "Filter by type of flows ",
          "type": "array",
          "items": { "type": "string", "x-nullable": false }
        }
      },
      "description": "MgmtFlowUsageStatsFilter",
      "type": "object"
    },
    "Webhook": {
      "title": "Webhook",
      "required": ["FlowKey", "Url"],
      "properties": {
        "Id": {
          "description": "The id of a webhook required for update (PUT)",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "FlowKey": {
          "description": "Each webhook is registered on a flow. There can be many webhooks per flow.",
          "type": "string"
        },
        "Url": {
          "$ref": "#/definitions/Uri",
          "description": "A publicly acceptable URL that can receive the event"
        },
        "Type": {
          "type": "string",
          "enum": [
            "NotSet",
            "SignedDocument",
            "AllSigned",
            "Auth",
            "Signup",
            "Canceled",
            "Expired",
            "Reminder",
            "CompanyTermination",
            "EmailVerification",
            "Completed",
            "Created"
          ]
        }
      },
      "description": "Webhook",
      "type": "object"
    },
    "Uri": {
      "title": "Uri",
      "properties": {},
      "description": "Uri",
      "type": "object"
    },
    "SealingRequest": {
      "title": "SealingRequest",
      "required": ["PdfDocument", "FlowKey"],
      "properties": {
        "PdfDocument": {
          "description": "Base64String of the PDF document to seal",
          "type": "string"
        },
        "FlowKey": {
          "description": "A valid flowKey provided by Taktikal that can be used for sealing",
          "type": "string"
        },
        "Reason": {
          "description": "set the reason to display in the seal",
          "type": "string"
        }
      },
      "description": "SealingRequest",
      "type": "object"
    },
    "CreateSigningProcess": {
      "title": "CreateSigningProcess",
      "required": ["FlowKey"],
      "properties": {
        "PdfDocument": {
          "description": "is a base64 string of the document to sign. This is not required if the flowKey takes care of creating the document.",
          "type": "string"
        },
        "PdfFileName": {
          "description": "If PdfDocument is being used a value for the file name needs to be provided.",
          "type": "string"
        },
        "FlowKey": {
          "description": "FlowKey is provided by Taktikal. This key will tell Taktikal how to handle this request.\n            For some flowKeys Taktikal will take care of creating the document.\n            It will also control where the signed document is delivered after signing.",
          "type": "string"
        },
        "CreateSignees": {
          "type": "array",
          "items": { "$ref": "#/definitions/CreateSignee" }
        },
        "Meta": {
          "$ref": "#/definitions/Dictionary_String_String_",
          "description": "is a key-value store that is used to store additional data for this particular signingProcess.\n            The data here can be used to create the document if needed, and displayed in emails.\n            All data in meta is also delivered in the webhook response"
        },
        "Attachments": {
          "type": "array",
          "items": { "$ref": "#/definitions/SigningAttachment" }
        },
        "AttachmentReferences": {
          "type": "array",
          "items": { "$ref": "#/definitions/AttachmentReference" }
        },
        "RequiresAuth": {
          "description": "Default value is false. If set to true then all signers need to use\n                    there e-Id to authenticate before being able to view the document. ",
          "type": "boolean",
          "x-nullable": false
        },
        "SignInOrder": {
          "description": "Default value is false. Will control the order of signers.\n              It will only send a signing request to the first person in the signers list to begin with.\n              After he has signed the next signee and so on.",
          "type": "boolean",
          "x-nullable": false
        },
        "SignatureLocation": {
          "description": "Can be BottomLastPage or the default value TopFirstPage. Will control where to display the signature in the document.",
          "type": "string",
          "enum": ["TopFirstPage", "BottomLastPage"]
        },
        "User": {
          "description": "email address of the user that send the request. Can be empty.",
          "type": "string"
        },
        "SequenceKey": { "type": "string" },
        "ActivityDisplayName": { "type": "string" }
      },
      "description": "CreateSigningProcess",
      "type": "object"
    },
    "CreateSignee": {
      "title": "CreateSignee",
      "properties": {
        "ProcessKey": { "type": "string" },
        "Name": { "type": "string" },
        "Ssn": { "type": "string" },
        "PhoneNumber": { "type": "string" },
        "Email": { "type": "string" },
        "Address": { "type": "string" },
        "PostalCode": { "type": "string" },
        "City": { "type": "string" },
        "Reason": { "type": "string" },
        "HidePersonalCode": { "type": "boolean", "x-nullable": false },
        "CommunicationDeliveryType": { "type": "string" },
        "SignatureType": { "type": "string" },
        "Language": { "type": "string" },
        "User": { "type": "string" }
      },
      "description": "CreateSignee",
      "type": "object"
    },
    "Dictionary_String_String_": {
      "title": "Dictionary<String,String>",
      "additionalProperties": { "type": "string" },
      "description": "Dictionary<String,String>",
      "type": "object"
    },
    "SigningAttachment": {
      "title": "SigningAttachment",
      "properties": {
        "fileName": { "type": "string" },
        "fileContent": { "type": "string" }
      },
      "description": "SigningAttachment",
      "type": "object"
    },
    "AttachmentReference": {
      "title": "AttachmentReference",
      "properties": {
        "id": { "type": "string" },
        "fileName": { "type": "string" },
        "contentLength": {
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "contentType": { "type": "string" },
        "url": { "type": "string" },
        "description": { "type": "string" },
        "processKey": { "type": "string" },
        "attachmentType": { "type": "string" }
      },
      "description": "AttachmentReference",
      "type": "object"
    },
    "CancelSigningProcess": {
      "title": "CancelSigningProcess",
      "properties": {
        "ProcessKey": { "type": "string" },
        "User": { "type": "string" }
      },
      "description": "CancelSigningProcess",
      "type": "object"
    },
    "MgmtUpdateApiKey": {
      "title": "MgmtUpdateApiKey",
      "required": ["Id"],
      "properties": {
        "Id": {
          "description": "The Id for this apikey",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "Name": { "type": "string" },
        "Permissions": {
          "type": "array",
          "items": { "$ref": "#/definitions/ApiKeyPermission" }
        }
      },
      "description": "MgmtUpdateApiKey",
      "type": "object"
    },
    "MgmtDeleteApiKey": {
      "title": "MgmtDeleteApiKey",
      "required": ["Id"],
      "properties": {
        "Id": {
          "description": "The Id for this apikey",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        }
      },
      "description": "MgmtDeleteApiKey",
      "type": "object"
    },
    "MgmtCreateCompanyCustomCss": {
      "title": "MgmtCreateCompanyCustomCss",
      "required": ["Content"],
      "properties": {
        "Content": {
          "description": "String that is custom css content",
          "type": "string"
        }
      },
      "description": "MgmtCreateCompanyCustomCss",
      "type": "object"
    },
    "GetCompanyPlans": {
      "title": "GetCompanyPlans",
      "properties": {},
      "description": "GetCompanyPlans",
      "type": "object"
    },
    "MgmtCreateFlowCustomCss": {
      "title": "MgmtCreateFlowCustomCss",
      "required": ["FlowKey", "Content"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        },
        "Content": { "description": "The css content", "type": "string" }
      },
      "description": "MgmtCreateFlowCustomCss",
      "type": "object"
    },
    "MgmtGetFlow": {
      "title": "MgmtGetFlow",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        }
      },
      "description": "MgmtGetFlow",
      "type": "object"
    },
    "MgmtDeleteFlow": {
      "title": "MgmtDeleteFlow",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        }
      },
      "description": "MgmtDeleteFlow",
      "type": "object"
    },
    "GetFlowFeedbackStatistics": {
      "title": "GetFlowFeedbackStatistics",
      "required": ["FlowKey", "StartDate", "EndDate"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        },
        "FeedbackType": {
          "description": "Flow feedback type",
          "type": "string"
        },
        "StartDate": {
          "description": "From date in a date range",
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "description": "To date in a date range",
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "GetFlowFeedbackStatistics",
      "type": "object"
    },
    "MgmtSignedTimeStatsFilter": {
      "title": "MgmtSignedTimeStatsFilter",
      "required": ["StartDate", "EndDate"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        },
        "StartDate": {
          "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "description": "End date of the log to be searched, must be a bigger date than StartDate ",
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "MgmtSignedTimeStatsFilter",
      "type": "object"
    },
    "StatsDistanceAndTimeFilter": {
      "title": "StatsDistanceAndTimeFilter",
      "properties": {
        "StartDate": {
          "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "description": "End date of the log to be searched, must be a bigger date than StartDate ",
          "type": "string",
          "format": "date-time"
        },
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        },
        "MinDistance": {
          "description": "The minimum distance traveled in meters",
          "type": "integer",
          "format": "int32"
        },
        "MaxDistance": {
          "description": "The maximum distance traveled in meters",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "StatsDistanceAndTimeFilter",
      "type": "object"
    },
    "MgmtUserStatsFilter": {
      "title": "MgmtUserStatsFilter",
      "required": ["StartedFrom", "StartedTo"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        },
        "User": {
          "description": "The key for a specific user",
          "type": "string"
        },
        "StartedFrom": {
          "description": "filter from when process was started, use format yyyy-MM  e.g. 1 dec 2001 should be 2001-12",
          "type": "string",
          "x-nullable": false
        },
        "StartedTo": {
          "description": "filter to when process was started, use format yyyy-MM  e.g. 31 dec 2001 should be 2001-12",
          "type": "string",
          "x-nullable": false
        }
      },
      "description": "MgmtUserStatsFilter",
      "type": "object"
    },
    "DeleteWebhook": {
      "title": "DeleteWebhook",
      "required": ["Id"],
      "properties": {
        "Id": {
          "description": "The id of a webhook",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        }
      },
      "description": "DeleteWebhook",
      "type": "object"
    },
    "CreateSequentialSigning": {
      "title": "CreateSequentialSigning",
      "required": ["CreateSigningProcesses", "User"],
      "properties": {
        "CreateSigningProcesses": {
          "description": "List of signing processes. At least 1 signing process is required.",
          "type": "array",
          "items": { "$ref": "#/definitions/CreateSigningProcess" }
        },
        "User": {
          "description": "The user who starts the sequential signing process",
          "type": "string"
        },
        "RequiresAuth": {
          "description": "Default value is false. If set to true then all signers need to use\n                    there e-Id to authenticate before being able to view the document. ",
          "type": "boolean",
          "x-nullable": false
        },
        "SignInOrder": {
          "description": "Default value is false. Will control the order of signers.\n              It will only send a signing request to the first person in the signers list to begin with.\n              After he has signed the next signee and so on.",
          "type": "boolean",
          "x-nullable": false
        }
      },
      "description": "CreateSequentialSigning",
      "type": "object"
    },
    "CancelSequenceSigning": {
      "title": "CancelSequenceSigning",
      "required": ["SequenceKey", "User"],
      "properties": {
        "SequenceKey": {
          "description": "Sequential signing process identifier that has to be provided.",
          "type": "string"
        },
        "User": {
          "description": "Only the person who started the signing process can cancel it.",
          "type": "string"
        }
      },
      "description": "CancelSequenceSigning",
      "type": "object"
    },
    "GetUserContacts": {
      "title": "GetUserContacts",
      "required": ["User"],
      "properties": {
        "User": {
          "description": "The user who owns the group",
          "type": "string"
        }
      },
      "description": "GetUserContacts",
      "type": "object"
    },
    "CreateUserContact": {
      "title": "CreateUserContact",
      "required": [
        "Name",
        "PhoneNumber",
        "Email",
        "SignatureType",
        "User",
        "GroupIds",
        "GroupNames"
      ],
      "properties": {
        "Name": { "description": "Contact name", "type": "string" },
        "Ssn": {
          "description": "Contact Ssn (Kennitala) this is required if the signature type is Qualified",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "Contact mobile phone number",
          "type": "string"
        },
        "Email": { "description": "Contact email address", "type": "string" },
        "SignatureType": {
          "description": "signature type",
          "type": "string",
          "enum": ["Qualified", "Simple"]
        },
        "User": {
          "description": "The user who owns the group",
          "type": "string"
        },
        "GroupIds": {
          "description": "Array of group id's the contact belongs to",
          "type": "array",
          "items": { "type": "integer", "format": "int32", "x-nullable": false }
        },
        "GroupNames": {
          "description": "Array of group names the contact belongs to",
          "type": "array",
          "items": { "type": "string" }
        }
      },
      "description": "CreateUserContact",
      "type": "object"
    },
    "Auth": {
      "title": "Auth",
      "required": ["PhoneNumber", "FlowKey", "LookupType"],
      "properties": {
        "PhoneNumber": { "type": "string" },
        "FlowKey": { "type": "string" },
        "LookupType": {
          "type": "string",
          "enum": ["NameAddress", "Name", "NameAddressFamily"]
        }
      },
      "description": "Auth",
      "type": "object"
    },
    "AuthStart": {
      "title": "AuthStart",
      "required": ["LoginHint", "FlowKey", "AuthenticationContextType"],
      "properties": {
        "LoginHint": { "type": "string" },
        "FlowKey": { "type": "string" },
        "AuthenticationContextType": {
          "type": "string",
          "enum": ["Sim", "App"]
        }
      },
      "description": "AuthStart",
      "type": "object"
    },
    "AuthPoll": {
      "title": "AuthPoll",
      "required": ["AuthRequestId", "FlowKey", "LookupType"],
      "properties": {
        "AuthRequestId": { "type": "string" },
        "FlowKey": { "type": "string" },
        "LookupType": {
          "type": "string",
          "enum": ["NameAddress", "Name", "NameAddressFamily"]
        }
      },
      "description": "AuthPoll",
      "type": "object"
    },
    "GetCustomerActivity": {
      "title": "GetCustomerActivity",
      "properties": { "Token": { "type": "string" } },
      "description": "GetCustomerActivity",
      "type": "object"
    },
    "GetCustomer": {
      "title": "GetCustomer",
      "properties": {
        "Token": { "type": "string" },
        "UserAgent": { "type": "string" }
      },
      "description": "GetCustomer",
      "type": "object"
    },
    "UpdateCustomer": {
      "title": "UpdateCustomer",
      "properties": {
        "Email": { "type": "string" },
        "Address": { "type": "string" },
        "PostalCode": { "type": "string" },
        "City": { "type": "string" },
        "Token": { "type": "string" },
        "Meta": { "$ref": "#/definitions/Dictionary_String_String_" }
      },
      "description": "UpdateCustomer",
      "type": "object"
    },
    "CreateCustomerRequest": {
      "title": "CreateCustomerRequest",
      "properties": {
        "Name": { "type": "string" },
        "Ssn": { "type": "string" },
        "PhoneNumber": { "type": "string" },
        "Email": { "type": "string" },
        "Address": { "type": "string" },
        "PostalCode": { "type": "string" },
        "City": { "type": "string" },
        "FlowKey": { "type": "string" },
        "ApiKey": { "type": "string" },
        "CommunicationDeliveryType": { "type": "string" },
        "Meta": { "$ref": "#/definitions/Dictionary_String_String_" }
      },
      "description": "CreateCustomerRequest",
      "type": "object"
    },
    "FlowCssContent": {
      "title": "FlowCssContent",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        }
      },
      "description": "FlowCssContent",
      "type": "object"
    },
    "FlowFeedback": {
      "title": "FlowFeedback",
      "required": ["FlowKey", "Score"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        },
        "FeedbackType": {
          "description": "Flow feedback type",
          "type": "string"
        },
        "Score": {
          "description": "The feedback score 1-10",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "Comment": { "description": "Comment to the score", "type": "string" }
      },
      "description": "FlowFeedback",
      "type": "object"
    },
    "FlowFilter": {
      "title": "FlowFilter",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        }
      },
      "description": "FlowFilter",
      "type": "object"
    },
    "FlowCompanyFilter": {
      "title": "FlowCompanyFilter",
      "properties": {},
      "description": "FlowCompanyFilter",
      "type": "object"
    },
    "FlowSign": {
      "title": "FlowSign",
      "properties": {
        "FlowKey": { "type": "string" },
        "CustomerKey": { "type": "string" }
      },
      "description": "FlowSign",
      "type": "object"
    },
    "GetFlowDeliveries": {
      "title": "GetFlowDeliveries",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        }
      },
      "description": "GetFlowDeliveries",
      "type": "object"
    },
    "HasCertificate": {
      "title": "HasCertificate",
      "required": ["Phone", "Ssn", "FlowKey"],
      "properties": {
        "Phone": {
          "description": "The phone number of a person to check",
          "type": "string"
        },
        "Ssn": {
          "description": "The ssn (kennitala) of a person to check",
          "type": "string"
        },
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        }
      },
      "description": "HasCertificate",
      "type": "object"
    },
    "SignDocumentStatusRequest": {
      "title": "SignDocumentStatusRequest",
      "properties": {
        "Token": { "type": "string" },
        "ProcessKey": { "type": "string" },
        "SigneeKey": { "type": "string" }
      },
      "description": "SignDocumentStatusRequest",
      "type": "object"
    },
    "MgmtCompanyCssContent": {
      "title": "MgmtCompanyCssContent",
      "properties": {},
      "description": "MgmtCompanyCssContent",
      "type": "object"
    },
    "MgmtCompanyCustomCssListFilter": {
      "title": "MgmtCompanyCustomCssListFilter",
      "properties": {},
      "description": "MgmtCompanyCustomCssListFilter",
      "type": "object"
    },
    "GetCompanyPublicKey": {
      "title": "GetCompanyPublicKey",
      "required": ["CompanyKey"],
      "properties": {
        "CompanyKey": { "description": "The company key", "type": "string" }
      },
      "description": "GetCompanyPublicKey",
      "type": "object"
    },
    "MgmtFlowCssContent": {
      "title": "MgmtFlowCssContent",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        }
      },
      "description": "MgmtFlowCssContent",
      "type": "object"
    },
    "GetWebhooks": {
      "title": "GetWebhooks",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "The flowKey to get all webhooks for",
          "type": "string"
        },
        "Type": {
          "description": "Can be empty to get all webhooks",
          "type": "string",
          "enum": [
            "NotSet",
            "SignedDocument",
            "AllSigned",
            "Auth",
            "Signup",
            "Canceled",
            "Expired",
            "Reminder",
            "CompanyTermination",
            "EmailVerification",
            "Completed",
            "Created"
          ]
        }
      },
      "description": "GetWebhooks",
      "type": "object"
    },
    "CreateUserContactGroup": {
      "title": "CreateUserContactGroup",
      "required": ["Name", "UserContactIds"],
      "properties": {
        "Name": { "description": "The name for the group", "type": "string" },
        "UserContactIds": {
          "description": "Array of id's of known contacts in the group",
          "type": "array",
          "items": { "type": "integer", "format": "int32", "x-nullable": false }
        },
        "User": {
          "description": "The user who owns the group",
          "type": "string"
        }
      },
      "description": "CreateUserContactGroup",
      "type": "object"
    },
    "UpdateUserContact": {
      "title": "UpdateUserContact",
      "required": [
        "Id",
        "Ssn",
        "PhoneNumber",
        "Email",
        "SignatureType",
        "User",
        "GroupIds",
        "GroupNames"
      ],
      "properties": {
        "Id": {
          "description": "The id of the contact",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "Name": { "description": "Contact name", "type": "string" },
        "Ssn": { "description": "Contact Ssn (Kennitala)", "type": "string" },
        "PhoneNumber": {
          "description": "Contact mobile phone number",
          "type": "string"
        },
        "Email": {
          "description": "Contact mobile email address",
          "type": "string"
        },
        "SignatureType": {
          "description": "signature type",
          "type": "string",
          "enum": ["Qualified", "Simple"]
        },
        "User": {
          "description": "The user who owns the group",
          "type": "string"
        },
        "GroupIds": {
          "description": "Array of group id's the contact belongs to",
          "type": "array",
          "items": { "type": "integer", "format": "int32", "x-nullable": false }
        },
        "GroupNames": {
          "description": "Array of group names the contact belongs to",
          "type": "array",
          "items": { "type": "string" }
        }
      },
      "description": "UpdateUserContact",
      "type": "object"
    },
    "DeleteUserContact": {
      "title": "DeleteUserContact",
      "required": ["Id", "User"],
      "properties": {
        "Id": {
          "description": "The id of the contact",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "User": {
          "description": "The user who owns the group",
          "type": "string"
        }
      },
      "description": "DeleteUserContact",
      "type": "object"
    },
    "MgmtFlowCustomCssListFilter": {
      "title": "MgmtFlowCustomCssListFilter",
      "required": ["FlowKey"],
      "properties": {
        "FlowKey": {
          "description": "The key for a specific flow",
          "type": "string"
        }
      },
      "description": "MgmtFlowCustomCssListFilter",
      "type": "object"
    },
    "UpdateUserContactGroup": {
      "title": "UpdateUserContactGroup",
      "required": ["Id", "Name", "UserContactIds"],
      "properties": {
        "Id": {
          "description": "The Id of the group",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "Name": { "description": "The name for the group", "type": "string" },
        "UserContactIds": {
          "description": "Array of id's of known contacts in the group",
          "type": "array",
          "items": { "type": "integer", "format": "int32", "x-nullable": false }
        },
        "User": {
          "description": "The user who owns the group",
          "type": "string"
        }
      },
      "description": "UpdateUserContactGroup",
      "type": "object"
    },
    "DeleteUserContactGroup": {
      "title": "DeleteUserContactGroup",
      "required": ["Id"],
      "properties": {
        "Id": {
          "description": "The Id of the group",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "User": {
          "description": "The user who owns the group",
          "type": "string"
        }
      },
      "description": "DeleteUserContactGroup",
      "type": "object"
    },
    "GetPdfForPreview": {
      "title": "GetPdfForPreview",
      "properties": { "CustomerKey": { "type": "string" } },
      "description": "GetPdfForPreview",
      "type": "object"
    },
    "CheckDocumentSigningRequest": {
      "title": "CheckDocumentSigningRequest",
      "required": ["FileContent", "FileName"],
      "properties": {
        "FileContent": {
          "description": "The content of a file",
          "type": "string"
        },
        "FileName": {
          "description": "The filename including the type. Maximum 256 letters in length",
          "type": "string"
        }
      },
      "description": "CheckDocumentSigningRequest",
      "type": "object"
    },
    "GetSignedPdf": {
      "title": "GetSignedPdf",
      "properties": { "CustomerKey": { "type": "string" } },
      "description": "GetSignedPdf",
      "type": "object"
    },
    "GetPdfForSigningProcessPreview": {
      "title": "GetPdfForSigningProcessPreview",
      "required": ["ProcessKey", "SigneeKey"],
      "properties": {
        "ProcessKey": {
          "description": "The signing process key provided when create a signing process",
          "type": "string"
        },
        "SigneeKey": {
          "description": "The signee key representing a signer of the document ",
          "type": "string"
        }
      },
      "description": "GetPdfForSigningProcessPreview",
      "type": "object"
    },
    "GetPdfForSigningProcessPreviewAuth": {
      "title": "GetPdfForSigningProcessPreviewAuth",
      "required": ["ProcessKey"],
      "properties": {
        "ProcessKey": {
          "description": "The signing process key provided when create a signing process",
          "type": "string"
        }
      },
      "description": "GetPdfForSigningProcessPreviewAuth",
      "type": "object"
    },
    "GetSequentialSigning": {
      "title": "GetSequentialSigning",
      "properties": {
        "SequenceKey": { "type": "string" },
        "SequentialSigneeKey": { "type": "string" }
      },
      "description": "GetSequentialSigning",
      "type": "object"
    },
    "CreateAttachmentReference": {
      "title": "CreateAttachmentReference",
      "required": ["ProcessKey", "SigneeKey"],
      "properties": {
        "ProcessKey": {
          "description": "The signing process key",
          "type": "string"
        },
        "SigneeKey": {
          "description": "The person who is signing key",
          "type": "string"
        },
        "Description": {
          "description": "The description of the attachment reference",
          "type": "string"
        },
        "AttachmentType": {
          "description": "AttachmentType, should be set to Unspecified",
          "type": "AttachmentType"
        }
      },
      "description": "CreateAttachmentReference",
      "type": "object"
    },
    "RequestToSign": {
      "title": "RequestToSign",
      "required": ["ProcessKey", "SigneeKey"],
      "properties": {
        "ProcessKey": {
          "description": "The signing process key",
          "type": "string"
        },
        "SigneeKey": {
          "description": "The person who is signing key",
          "type": "string"
        },
        "OtpType": {
          "description": "If the signature type is Simple, then the OTP request can be SMS or call.\n This setting is ignored for qualified signatures",
          "type": "string"
        }
      },
      "description": "RequestToSign",
      "type": "object"
    },
    "UpdateSigningProcessMeta": {
      "title": "UpdateSigningProcessMeta",
      "required": ["ProcessKey", "SigneeKey", "Meta"],
      "properties": {
        "ProcessKey": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "Meta": {
          "$ref": "#/definitions/Dictionary_String_String_",
          "type": "object"
        },
        "SkipDocumentUpdate": {
          "description": "if set to true we will not trigger a document recreation",
          "type": "boolean",
          "x-nullable": false
        }
      },
      "description": "UpdateSigningProcessMeta",
      "type": "object"
    },
    "GetCompanyBrandingBySequence": {
      "title": "GetCompanyBrandingBySequence",
      "required": ["SequenceKey"],
      "properties": {
        "SequenceKey": {
          "description": "Sequential signing process identifier that has to be provided.",
          "type": "string"
        }
      },
      "description": "GetCompanyBrandingBySequence",
      "type": "object"
    },
    "GetSigningProcessBySignee": {
      "title": "GetSigningProcessBySignee",
      "properties": {
        "ProcessKey": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "UserAgent": { "type": "string" }
      },
      "description": "GetSigningProcessBySignee",
      "type": "object"
    },
    "UpdateSignee": {
      "title": "UpdateSignee",
      "required": ["SigneeKey", "ProcessKey"],
      "properties": {
        "Email": { "type": "string" },
        "Address": { "type": "string" },
        "PostalCode": { "type": "string" },
        "City": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "ProcessKey": { "type": "string" },
        "Reason": { "type": "string" },
        "User": { "type": "string" }
      },
      "description": "UpdateSignee",
      "type": "object"
    },
    "CreateSimpleSignatureBulkImageRequest": {
      "title": "CreateSimpleSignatureBulkImageRequest",
      "properties": {
        "SequenceKey": { "type": "string" },
        "SequenceSigneeKey": { "type": "string" },
        "Image": { "type": "string", "format": "byte", "x-nullable": false },
        "ImageWidth": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ImageHeight": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ImageXInsetFac": {
          "type": "number",
          "format": "double",
          "x-nullable": false
        },
        "ImageYBaselineFac": {
          "type": "number",
          "format": "double",
          "x-nullable": false
        },
        "ImageWidthFac": {
          "type": "number",
          "format": "double",
          "x-nullable": false
        }
      },
      "description": "CreateSimpleSignatureBulkImageRequest",
      "type": "object"
    },
    "SimpleSigningOtpBulkRequest": {
      "title": "SimpleSigningOtpBulkRequest",
      "required": ["Token", "OTP"],
      "properties": {
        "Token": { "type": "string" },
        "OTP": { "type": "string" }
      },
      "description": "SimpleSigningOtpBulkRequest",
      "type": "object"
    },
    "CreateSequenceAccessToken": {
      "title": "CreateSequenceAccessToken",
      "required": ["SequenceKey", "SequentialSigneeKey"],
      "properties": {
        "SequenceKey": { "type": "string" },
        "SequentialSigneeKey": { "type": "string" },
        "ExpiresIn": {
          "description": "time in seconds of how long the token will be valid, default is 172800 (2 days)",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "CreateSequenceAccessToken",
      "type": "object"
    },
    "GetAttachment": {
      "title": "GetAttachment",
      "required": ["Id", "ProcessKey", "FileName"],
      "properties": {
        "Id": { "description": "The id of the reference ", "type": "string" },
        "ProcessKey": {
          "description": "The signing process key",
          "type": "string"
        },
        "FileName": {
          "description": "The filename including the type",
          "type": "string"
        }
      },
      "description": "GetAttachment",
      "type": "object"
    },
    "DeleteAttachmentReference": {
      "title": "DeleteAttachmentReference",
      "required": ["Id", "ProcessKey", "FileName"],
      "properties": {
        "Id": {
          "description": "The id of the reference to be deleted",
          "type": "string"
        },
        "ProcessKey": {
          "description": "The signing process key",
          "type": "string"
        },
        "FileName": {
          "description": "The filename including the type",
          "type": "string"
        }
      },
      "description": "DeleteAttachmentReference",
      "type": "object"
    },
    "RequestToView": {
      "title": "RequestToView",
      "properties": {
        "ProcessKey": { "type": "string" },
        "PhoneNumber": { "type": "string" }
      },
      "description": "RequestToView",
      "type": "object"
    },
    "SigningReminder": {
      "title": "SigningReminder",
      "properties": {
        "ProcessKey": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "User": { "type": "string" },
        "CommunicationDeliveryType": { "type": "string" }
      },
      "description": "SigningReminder",
      "type": "object"
    },
    "CreateSigningProcessToken": {
      "title": "CreateSigningProcessToken",
      "required": ["ProcessKey", "SigneeKey"],
      "properties": {
        "ProcessKey": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "ExpiresIn": {
          "description": "time in seconds of how long the token will be valid, default is 172800 (2 days)",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "CreateSigningProcessToken",
      "type": "object"
    },
    "RequestToBulkSign": {
      "title": "RequestToBulkSign",
      "required": ["SequenceKey", "SequentialSigneeKey"],
      "properties": {
        "SequenceKey": { "type": "string" },
        "SequentialSigneeKey": { "type": "string" },
        "OtpType": {
          "description": "The default value is sms but it can be set to call if needed.",
          "type": "string"
        }
      },
      "description": "RequestToBulkSign",
      "type": "object"
    },
    "GlobalStatsDistanceAndTimeFilter": {
      "title": "GlobalStatsDistanceAndTimeFilter",
      "required": ["StartDate", "EndDate"],
      "properties": {
        "StartDate": {
          "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "description": "End date of the log to be searched, must be a bigger date than StartDate ",
          "type": "string",
          "format": "date-time"
        },
        "MinDistance": {
          "description": "The minimum distance traveled in meters",
          "type": "integer",
          "format": "int32"
        },
        "MaxDistance": {
          "description": "The maximum distance traveled in meters",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "GlobalStatsDistanceAndTimeFilter",
      "type": "object"
    },
    "CompanyStatsDistanceAndTimeFilter": {
      "title": "CompanyStatsDistanceAndTimeFilter",
      "required": ["PublicCompanyKey", "StartDate", "EndDate"],
      "properties": {
        "PublicCompanyKey": {
          "description": "The public company key that is provided in app.taktikal",
          "type": "string"
        },
        "StartDate": {
          "description": "Start date of the log to be searched, must be a smaller date than EndDate ",
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "description": "End date of the log to be searched, must be a bigger date than StartDate ",
          "type": "string",
          "format": "date-time"
        },
        "MinDistance": {
          "description": "The minimum distance traveled in meters",
          "type": "integer",
          "format": "int32"
        },
        "MaxDistance": {
          "description": "The maximum distance traveled in meters",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "CompanyStatsDistanceAndTimeFilter",
      "type": "object"
    },
    "VerifyEmail": {
      "title": "VerifyEmail",
      "required": ["Id", "Token"],
      "properties": {
        "Id": { "type": "string" },
        "Token": { "type": "string", "x-nullable": false }
      },
      "description": "VerifyEmail",
      "type": "object"
    },
    "ValidateRequest": {
      "title": "ValidateRequest",
      "required": ["signedDocument"],
      "properties": {
        "signedDocument": {
          "$ref": "#/definitions/RemoteDocument",
          "description": "Document to be validated "
        },
        "originalDocuments": {
          "$ref": "#/definitions/RemoteDocument",
          "description": "Original document "
        },
        "policy": { "$ref": "#/definitions/RemoteDocument" },
        "tokenExtractionStrategy": { "type": "string" },
        "signatureId": { "type": "string" },
        "flowKey": { "description": "FlowKey", "type": "string" }
      },
      "description": "ValidateRequest",
      "type": "object"
    },
    "RemoteDocument": {
      "title": "RemoteDocument",
      "properties": {
        "bytes": { "type": "string" },
        "digestAlgorithm": { "type": "string" },
        "name": { "type": "string" }
      },
      "description": "RemoteDocument",
      "type": "object"
    },
    "Authenticate": {
      "title": "Authenticate",
      "properties": {
        "provider": {
          "description": "AuthProvider, e.g. credentials",
          "type": "string"
        },
        "State": { "type": "string" },
        "oauth_token": { "type": "string" },
        "oauth_verifier": { "type": "string" },
        "UserName": { "type": "string" },
        "Password": { "type": "string" },
        "RememberMe": { "type": "boolean" },
        "ErrorView": { "type": "string" },
        "nonce": { "type": "string" },
        "uri": { "type": "string" },
        "response": { "type": "string" },
        "qop": { "type": "string" },
        "nc": { "type": "string" },
        "cnonce": { "type": "string" },
        "AccessToken": { "type": "string" },
        "AccessTokenSecret": { "type": "string" },
        "scope": { "type": "string" },
        "Meta": { "$ref": "#/definitions/Dictionary_String_String_" }
      },
      "description": "Sign In",
      "type": "object"
    },
    "SigningProcessActivityLogWrapper": {
      "title": "SigningProcessActivityLogWrapper",
      "properties": {
        "ProcessKey": { "type": "string" },
        "ActivityLog": {
          "type": "array",
          "items": { "$ref": "#/definitions/SigningProcessActivityLog" }
        },
        "Signees": {
          "type": "array",
          "items": { "$ref": "#/definitions/SigneeActivityLog" }
        },
        "SequenceSignees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SequentialSigningSigneeActivityLog"
          }
        },
        "AttachmentReferences": {
          "type": "array",
          "items": { "$ref": "#/definitions/AttachmentReference" }
        },
        "ActivityDisplayName": { "type": "string" }
      },
      "description": "SigningProcessActivityLogWrapper",
      "type": "object"
    },
    "SigningProcessActivityLog": {
      "title": "SigningProcessActivityLog",
      "properties": {
        "FlowKey": { "type": "string" },
        "ProcessKey": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "Status": { "type": "string" },
        "Description": { "type": "string" },
        "UserAgent": { "type": "string" },
        "FileName": { "type": "string" },
        "CreatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "CreatedBy": { "type": "string" },
        "RequiresAuth": { "type": "boolean" },
        "SignInOrder": { "type": "boolean" },
        "SignatureLocation": { "type": "string" },
        "SequenceKey": { "type": "string" }
      },
      "description": "SigningProcessActivityLog",
      "type": "object"
    },
    "SigneeActivityLog": {
      "title": "SigneeActivityLog",
      "properties": {
        "ProcessKey": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "Ssn": { "type": "string" },
        "Name": { "type": "string" },
        "Address": { "type": "string" },
        "PostalCode": { "type": "string" },
        "City": { "type": "string" },
        "Phone": { "type": "string" },
        "Email": { "type": "string" },
        "CreatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "CreatedBy": { "type": "string" },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "SignatureType": { "type": "string" }
      },
      "description": "SigneeActivityLog",
      "type": "object"
    },
    "SequentialSigningSigneeActivityLog": {
      "title": "SequentialSigningSigneeActivityLog",
      "properties": {
        "SequenceKey": { "type": "string" },
        "SigneeKey": { "type": "string" },
        "Url": { "type": "string" },
        "SigningKeys": {
          "type": "array",
          "items": { "$ref": "#/definitions/SigneeKeys" }
        }
      },
      "description": "SequentialSigningSigneeActivityLog",
      "type": "object"
    },
    "SigneeKeys": {
      "title": "SigneeKeys",
      "properties": {
        "SigneeKey": { "type": "string" },
        "ProcessKey": { "type": "string" }
      },
      "description": "SigneeKeys",
      "type": "object"
    },
    "List_SigningProcessActivityLogWrapper_": {
      "title": "List<SigningProcessActivityLogWrapper>",
      "type": "array",
      "items": { "$ref": "#/definitions/SigningProcessActivityLogWrapper" }
    },
    "SequentialSigning": {
      "title": "SequentialSigning",
      "properties": {
        "Key": { "type": "string" },
        "Status": { "type": "string" },
        "RequiresAuth": { "type": "boolean", "x-nullable": false },
        "User": { "type": "string" },
        "SignInOrder": { "type": "boolean", "x-nullable": false },
        "Signees": {
          "type": "array",
          "items": { "$ref": "#/definitions/SequentialSigningSignee" }
        },
        "SigningProcesses": {
          "type": "array",
          "items": { "$ref": "#/definitions/SigningProcess" }
        }
      },
      "description": "SequentialSigning",
      "type": "object"
    },
    "SequentialSigningSignee": {
      "title": "SequentialSigningSignee",
      "properties": {
        "Key": { "type": "string" },
        "Url": { "type": "string" },
        "SigningKeys": {
          "type": "array",
          "items": { "$ref": "#/definitions/SigneeKeys" }
        }
      },
      "description": "SequentialSigningSignee",
      "type": "object"
    },
    "SigningProcess": {
      "title": "SigningProcess",
      "properties": {
        "key": { "type": "string" },
        "signees": {
          "type": "array",
          "items": { "$ref": "#/definitions/Signee" }
        },
        "flowKey": { "type": "string" },
        "status": { "type": "string" },
        "meta": { "$ref": "#/definitions/Dictionary_String_String_" },
        "pdfFileName": { "type": "string" },
        "attachments": {
          "type": "array",
          "items": { "$ref": "#/definitions/SigningAttachment" }
        },
        "attachmentReferences": {
          "type": "array",
          "items": { "$ref": "#/definitions/AttachmentReference" }
        },
        "requiresAuth": { "type": "boolean", "x-nullable": false },
        "user": { "type": "string" },
        "signInOrder": { "type": "boolean", "x-nullable": false },
        "signatureLocation": { "type": "string" },
        "sequenceKey": { "type": "string" }
      },
      "description": "SigningProcess",
      "type": "object"
    },
    "Signee": {
      "title": "Signee",
      "properties": {
        "name": { "type": "string" },
        "ssn": { "type": "string" },
        "phoneNumber": { "type": "string" },
        "email": { "type": "string" },
        "address": { "type": "string" },
        "postalCode": { "type": "string" },
        "city": { "type": "string" },
        "key": { "type": "string" },
        "signed": { "type": "boolean", "x-nullable": false },
        "processKey": { "type": "string" },
        "reason": { "type": "string" },
        "hidePersonalCode": { "type": "boolean", "x-nullable": false },
        "communicationDeliveryType": { "type": "string" },
        "uRL": { "type": "string" },
        "signatureType": { "type": "string" },
        "language": { "type": "string" }
      },
      "description": "Signee",
      "type": "object"
    },
    "CompanyBranding": {
      "title": "CompanyBranding",
      "properties": {
        "Logo": { "type": "string" },
        "Name": { "type": "string" },
        "Meta": { "$ref": "#/definitions/Dictionary_String_String_" }
      },
      "description": "CompanyBranding",
      "type": "object"
    },
    "SimpleSigningOtpResponse": {
      "title": "SimpleSigningOtpResponse",
      "properties": {
        "File": { "$ref": "#/definitions/FileSign" },
        "Token": { "type": "string" },
        "Message": { "type": "string" },
        "ErrorCode": { "type": "string" }
      },
      "description": "SimpleSigningOtpResponse",
      "type": "object"
    },
    "FileSign": {
      "title": "FileSign",
      "properties": {
        "content": { "type": "string" },
        "digest": { "type": "string" },
        "fileName": { "type": "string" }
      },
      "description": "FileSign",
      "type": "object"
    },
    "ApiKey": {
      "title": "ApiKey",
      "properties": {
        "Id": { "type": "integer", "format": "int32", "x-nullable": false },
        "CompanyKey": { "type": "string" },
        "Name": { "type": "string" },
        "Permissions": {
          "type": "array",
          "items": { "$ref": "#/definitions/ApiKeyPermission" }
        }
      },
      "description": "ApiKey",
      "type": "object"
    },
    "List_ApiKey_": {
      "title": "List<ApiKey>",
      "type": "array",
      "items": { "$ref": "#/definitions/ApiKey" }
    },
    "ApiKeyCreated": {
      "title": "ApiKeyCreated",
      "properties": {
        "Id": { "type": "integer", "format": "int32", "x-nullable": false },
        "KeyRaw": { "type": "string" },
        "Name": { "type": "string" },
        "Permissions": {
          "type": "array",
          "items": { "$ref": "#/definitions/ApiKeyPermission" }
        }
      },
      "description": "ApiKeyCreated",
      "type": "object"
    },
    "EmailTemplate": {
      "title": "EmailTemplate",
      "properties": {
        "FlowKey": { "type": "string" },
        "Id": { "type": "integer", "format": "int32", "x-nullable": false },
        "To": { "type": "string" },
        "Bcc": { "type": "string" },
        "Subject": { "type": "string" },
        "Message": { "type": "string" },
        "ContentAsHtml": { "type": "string" },
        "IncludeFiles": { "type": "boolean", "x-nullable": false },
        "TemplateType": { "type": "string" },
        "LinkText": { "type": "string" },
        "Language": { "type": "string" }
      },
      "description": "EmailTemplate",
      "type": "object"
    },
    "List_EmailTemplate_": {
      "title": "List<EmailTemplate>",
      "type": "array",
      "items": { "$ref": "#/definitions/EmailTemplate" }
    },
    "DeleteEmailTemplateResponse": {
      "title": "DeleteEmailTemplateResponse",
      "properties": {
        "ResponseStatus": { "$ref": "#/definitions/ResponseStatus" }
      },
      "description": "DeleteEmailTemplateResponse",
      "type": "object"
    },
    "ResponseStatus": {
      "title": "ResponseStatus",
      "properties": {
        "ErrorCode": { "type": "string" },
        "Message": { "type": "string" },
        "StackTrace": { "type": "string" },
        "Errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/ResponseError" }
        },
        "Meta": { "$ref": "#/definitions/Dictionary_String_String_" }
      },
      "description": "ResponseStatus",
      "type": "object"
    },
    "ResponseError": {
      "title": "ResponseError",
      "properties": {
        "ErrorCode": { "type": "string" },
        "FieldName": { "type": "string" },
        "Message": { "type": "string" },
        "Meta": { "$ref": "#/definitions/Dictionary_String_String_" }
      },
      "description": "ResponseError",
      "type": "object"
    },
    "FlowOverview": {
      "title": "FlowOverview",
      "properties": {
        "id": { "type": "integer", "format": "int32", "x-nullable": false },
        "key": { "type": "string" },
        "name": { "type": "string" },
        "description": { "type": "string" },
        "active": { "type": "boolean", "x-nullable": false },
        "contract": { "type": "string" },
        "contractValues": { "type": "array", "items": { "type": "string" } },
        "contractValuesAsString": { "type": "string" },
        "contractViewType": { "type": "string" },
        "authDisplayText": { "type": "string" },
        "contractAcceptanceText": { "type": "string" },
        "companyKey": { "type": "string" },
        "companyName": { "type": "string" },
        "yype": { "type": "string" },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "canHaveAttachments": { "type": "boolean", "x-nullable": false },
        "minNumberOfAttachments": { "type": "integer", "format": "int32" },
        "productType": { "type": "string" },
        "initiatedType": { "type": "string" },
        "maxAdditionalSignees": { "type": "integer", "format": "int32" },
        "minAdditionalSignees": { "type": "integer", "format": "int32" },
        "activityDisplayName": { "type": "string" },
        "deleted": { "type": "boolean" },
        "signatureType": { "type": "string" },
        "languageType": { "type": "string" }
      },
      "description": "FlowOverview",
      "type": "object"
    },
    "List_FlowOverview_": {
      "title": "List<FlowOverview>",
      "type": "array",
      "items": { "$ref": "#/definitions/FlowOverview" }
    },
    "Flow": {
      "title": "Flow",
      "properties": {
        "Key": { "type": "string" },
        "Name": { "type": "string" },
        "Description": { "type": "string" },
        "Active": { "type": "boolean", "x-nullable": false },
        "Contract": { "type": "string" },
        "ContractValues": { "type": "array", "items": { "type": "string" } },
        "ContractValuesAsString": { "type": "string" },
        "AuthDisplayText": { "type": "string" },
        "CompanyId": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "CompanyKey": { "type": "string" },
        "CompanyName": { "type": "string" },
        "ContractAcceptanceText": { "type": "string" },
        "ContractViewType": { "type": "string" },
        "Type": { "type": "string" },
        "CanHaveAttachments": { "type": "boolean", "x-nullable": false },
        "MinNumberOfAttachments": { "type": "integer", "format": "int32" },
        "ProductType": { "type": "string" },
        "InitiatedType": { "type": "string" },
        "MaxAdditionalSignees": { "type": "integer", "format": "int32" },
        "MinAdditionalSignees": { "type": "integer", "format": "int32" },
        "ActivityDisplayName": { "type": "string" },
        "Deleted": { "type": "boolean" },
        "SignatureType": { "type": "string" },
        "LanguageType": { "type": "string" }
      },
      "description": "Flow",
      "type": "object"
    },
    "FlowUsageStats": {
      "title": "FlowUsageStats",
      "properties": {
        "FlowKey": { "type": "string" },
        "FlowName": { "type": "string" },
        "FlowType": { "type": "string" },
        "CompanyKey": { "type": "string" },
        "CompanyName": { "type": "string" },
        "Totals": { "type": "integer", "format": "int32", "x-nullable": false },
        "Status": { "type": "string" },
        "ForDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "FlowUsageStats",
      "type": "object"
    },
    "List_FlowUsageStats_": {
      "title": "List<FlowUsageStats>",
      "type": "array",
      "items": { "$ref": "#/definitions/FlowUsageStats" }
    },
    "SealingResponse": {
      "title": "SealingResponse",
      "properties": { "PdfDocument": { "type": "string" } },
      "description": "SealingResponse",
      "type": "object"
    },
    "ErrorResponse": {
      "title": "ErrorResponse",
      "properties": {
        "ResponseStatus": { "$ref": "#/definitions/ResponseStatus" }
      },
      "description": "ErrorResponse",
      "type": "object"
    },
    "CompanyCustomCss": {
      "title": "CompanyCustomCss",
      "properties": {
        "CompanyKey": { "type": "string" },
        "Content": { "type": "string" },
        "CreatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "CompanyCustomCss",
      "type": "object"
    },
    "List_CompanyPlanType_": {
      "title": "List<CompanyPlanType>",
      "type": "array",
      "items": { "type": "string", "x-nullable": false }
    },
    "FlowCustomCss": {
      "title": "FlowCustomCss",
      "properties": {
        "FlowKey": { "type": "string" },
        "Content": { "type": "string" },
        "CreatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "FlowCustomCss",
      "type": "object"
    },
    "Task": {
      "title": "Task",
      "properties": {},
      "description": "Task",
      "type": "object"
    },
    "FlowFeedbackStatistics": {
      "title": "FlowFeedbackStatistics",
      "properties": {
        "FlowKey": { "type": "string" },
        "FeedbackType": { "type": "string" },
        "Score0": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score1": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score2": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score3": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score4": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score5": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score6": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score7": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score8": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score9": { "type": "integer", "format": "int32", "x-nullable": false },
        "Score10": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "FlowFeedbackStatistics",
      "type": "object"
    },
    "List_FlowFeedbackStatistics_": {
      "title": "List<FlowFeedbackStatistics>",
      "type": "array",
      "items": { "$ref": "#/definitions/FlowFeedbackStatistics" }
    },
    "SignedTimeBracketStatsResponse": {
      "title": "SignedTimeBracketStatsResponse",
      "properties": {
        "FlowKey": { "type": "string" },
        "Date": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "Items": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignedTimeBracketStats" }
        }
      },
      "description": "SignedTimeBracketStatsResponse",
      "type": "object"
    },
    "SignedTimeBracketStats": {
      "title": "SignedTimeBracketStats",
      "properties": {
        "FlowKey": { "type": "string" },
        "TimeBracket": { "type": "string" },
        "Total": { "type": "integer", "format": "int32", "x-nullable": false }
      },
      "description": "SignedTimeBracketStats",
      "type": "object"
    },
    "List_SignedTimeBracketStatsResponse_": {
      "title": "List<SignedTimeBracketStatsResponse>",
      "type": "array",
      "items": { "$ref": "#/definitions/SignedTimeBracketStatsResponse" }
    },
    "StatsDistanceAndTimeResult": {
      "title": "StatsDistanceAndTimeResult",
      "properties": {
        "TotalDistance": {
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "TotalTime": {
          "type": "integer",
          "format": "int64",
          "x-nullable": false
        },
        "AvgDistance": {
          "type": "number",
          "format": "double",
          "x-nullable": false
        },
        "AvgTime": {
          "type": "number",
          "format": "double",
          "x-nullable": false
        },
        "TotalTrips": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "StartDate": { "type": "string", "format": "date-time" },
        "EndDate": { "type": "string", "format": "date-time" }
      },
      "description": "StatsDistanceAndTimeResult",
      "type": "object"
    },
    "StatisticsWrapper": {
      "title": "StatisticsWrapper",
      "properties": {
        "UserStatistics": {
          "type": "array",
          "items": { "$ref": "#/definitions/UserStatsWrapper" }
        },
        "FlowStatistics": {
          "type": "array",
          "items": { "$ref": "#/definitions/FlowStatsWrapper" }
        }
      },
      "description": "StatisticsWrapper",
      "type": "object"
    },
    "UserStatsWrapper": {
      "title": "UserStatsWrapper",
      "properties": {
        "User": { "type": "string" },
        "TotalSignatures": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "CompletedSignatures": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "CompletedTransactions": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "AverageTransactionTimeInSeconds": {
          "description": "This is optional and might not be in the return, if none finished",
          "type": "number",
          "format": "double"
        },
        "Year": { "type": "integer", "format": "int32", "x-nullable": false },
        "Month": { "type": "integer", "format": "int32", "x-nullable": false },
        "TotalTransactions": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ExpiredTransactions": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        }
      },
      "description": "UserStatsWrapper",
      "type": "object"
    },
    "FlowStatsWrapper": {
      "title": "FlowStatsWrapper",
      "properties": {
        "FlowKey": { "type": "string" },
        "FlowName": { "type": "string" },
        "FlowType": { "type": "string" },
        "TotalSignatures": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "CompletedSignatures": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "AverageTransactionTimeInSeconds": {
          "description": "This is optional and might not be in the return, if none finished",
          "type": "number",
          "format": "double"
        },
        "Year": { "type": "integer", "format": "int32", "x-nullable": false },
        "Month": { "type": "integer", "format": "int32", "x-nullable": false },
        "CompletedTransactions": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "TotalTransactions": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ExpiredTransactions": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        }
      },
      "description": "FlowStatsWrapper",
      "type": "object"
    },
    "UserContacts": {
      "title": "UserContacts",
      "properties": {
        "Contacts": {
          "type": "array",
          "items": { "$ref": "#/definitions/UserContact" }
        },
        "Groups": {
          "type": "array",
          "items": { "$ref": "#/definitions/UserContactGroup" }
        }
      },
      "description": "UserContacts",
      "type": "object"
    },
    "UserContact": {
      "title": "UserContact",
      "properties": {
        "Id": { "type": "integer", "format": "int32", "x-nullable": false },
        "Name": { "type": "string" },
        "Ssn": { "type": "string" },
        "PhoneNumber": { "type": "string" },
        "Email": { "type": "string" },
        "SignatureType": { "type": "string" },
        "GroupIds": {
          "type": "array",
          "items": { "type": "integer", "format": "int32", "x-nullable": false }
        }
      },
      "description": "UserContact",
      "type": "object"
    },
    "UserContactGroup": {
      "title": "UserContactGroup",
      "properties": {
        "Id": { "type": "integer", "format": "int32", "x-nullable": false },
        "Name": { "type": "string" },
        "UserContactIds": {
          "type": "array",
          "items": { "type": "integer", "format": "int32", "x-nullable": false }
        }
      },
      "description": "UserContactGroup",
      "type": "object"
    },
    "Customer": {
      "title": "Customer",
      "properties": {
        "Name": { "type": "string" },
        "Ssn": { "type": "string" },
        "PhoneNumber": { "type": "string" },
        "Email": { "type": "string" },
        "Address": { "type": "string" },
        "PostalCode": { "type": "string" },
        "City": { "type": "string" },
        "Token": { "type": "string" },
        "FlowKey": { "type": "string" },
        "Meta": { "$ref": "#/definitions/Dictionary_String_String_" }
      },
      "description": "Customer",
      "type": "object"
    },
    "StartAuthResponse": {
      "title": "StartAuthResponse",
      "properties": {
        "AuthRequestId": { "type": "string" },
        "VerificationCode": { "type": "string" }
      },
      "description": "StartAuthResponse",
      "type": "object"
    },
    "PollCustomer": {
      "title": "PollCustomer",
      "properties": {
        "Customer": { "$ref": "#/definitions/Customer" },
        "StatusMessage": { "type": "string" },
        "WaitingForUserInput": { "type": "boolean", "x-nullable": false }
      },
      "description": "PollCustomer",
      "type": "object"
    },
    "CustomerActivityLog": {
      "title": "CustomerActivityLog",
      "properties": {
        "FlowKey": { "type": "string" },
        "CustomerHash": { "type": "string" },
        "UserAgent": { "type": "string" },
        "Log": {
          "type": "array",
          "items": { "$ref": "#/definitions/CustomerActivityLogEntry" }
        }
      },
      "description": "CustomerActivityLog",
      "type": "object"
    },
    "CustomerActivityLogEntry": {
      "title": "CustomerActivityLogEntry",
      "properties": {
        "CustomerKey": { "type": "string" },
        "Description": { "type": "string" },
        "Status": { "type": "string" },
        "CreatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "CustomerActivityLogEntry",
      "type": "object"
    },
    "SignDocumentResponse": {
      "title": "SignDocumentResponse",
      "properties": {
        "control_code": { "type": "string" },
        "error_code": { "type": "string" },
        "lockedBy": { "type": "string" },
        "message": { "type": "string" },
        "signature_type": { "type": "string" },
        "status": { "type": "string" },
        "token": { "type": "string" },
        "valid_until": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "processKey": { "type": "string" },
        "signeeKey": { "type": "string" }
      },
      "description": "SignDocumentResponse",
      "type": "object"
    },
    "FlowDeliveries": {
      "title": "FlowDeliveries",
      "properties": {
        "EmailTemplateTypes": {
          "type": "array",
          "items": { "type": "string" }
        },
        "WebhookTypes": { "type": "array", "items": { "type": "string" } }
      },
      "description": "FlowDeliveries",
      "type": "object"
    },
    "HasCertificateResponse": {
      "title": "HasCertificateResponse",
      "properties": {
        "country": { "type": "string" },
        "error_code": { "type": "string" },
        "message": { "type": "string" },
        "name": { "type": "string" },
        "ResponseStatus": { "$ref": "#/definitions/ResponseStatus" },
        "status": { "type": "string" }
      },
      "description": "HasCertificateResponse",
      "type": "object"
    },
    "SignDocumentStatusResponse": {
      "title": "SignDocumentStatusResponse",
      "properties": {
        "error_code": { "type": "string" },
        "file": { "$ref": "#/definitions/FileSign" },
        "message": { "type": "string" },
        "status": { "type": "string" },
        "token": { "type": "string" }
      },
      "description": "SignDocumentStatusResponse",
      "type": "object"
    },
    "CompanyCustomCssListItem": {
      "title": "CompanyCustomCssListItem",
      "properties": {
        "Id": { "type": "integer", "format": "int32", "x-nullable": false },
        "CompanyKey": { "type": "string" },
        "Content": { "type": "string" },
        "CreatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "CompanyCustomCssListItem",
      "type": "object"
    },
    "List_CompanyCustomCssListItem_": {
      "title": "List<CompanyCustomCssListItem>",
      "type": "array",
      "items": { "$ref": "#/definitions/CompanyCustomCssListItem" }
    },
    "List_Webhook_": {
      "title": "List<Webhook>",
      "type": "array",
      "items": { "$ref": "#/definitions/Webhook" }
    },
    "FlowCustomCssListItem": {
      "title": "FlowCustomCssListItem",
      "properties": {
        "Id": { "type": "integer", "format": "int32", "x-nullable": false },
        "FlowKey": { "type": "string" },
        "Content": { "type": "string" },
        "CreatedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "FlowCustomCssListItem",
      "type": "object"
    },
    "List_FlowCustomCssListItem_": {
      "title": "List<FlowCustomCssListItem>",
      "type": "array",
      "items": { "$ref": "#/definitions/FlowCustomCssListItem" }
    },
    "GetPdfForPreviewResponse": {
      "title": "GetPdfForPreviewResponse",
      "properties": {
        "ResponseStatus": { "$ref": "#/definitions/ResponseStatus" }
      },
      "description": "GetPdfForPreviewResponse",
      "type": "object"
    },
    "CheckDocumentSigningResponse": {
      "title": "CheckDocumentSigningResponse",
      "properties": {
        "status": { "type": "string" },
        "message": { "type": "string" },
        "error_code": { "type": "string" },
        "structure": { "$ref": "#/definitions/CheckDocumentSigningStructure" }
      },
      "description": "CheckDocumentSigningResponse",
      "type": "object"
    },
    "CheckDocumentSigningStructure": {
      "title": "CheckDocumentSigningStructure",
      "properties": {
        "content": {
          "type": "array",
          "items": { "$ref": "#/definitions/CheckDocumentSigningContent" }
        },
        "signatures": {
          "type": "array",
          "items": { "$ref": "#/definitions/CheckDocumentSigningSignatures" }
        },
        "standard": { "type": "string" },
        "category": { "type": "string" },
        "is_valid": { "type": "boolean", "x-nullable": false },
        "valid_to": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "CheckDocumentSigningStructure",
      "type": "object"
    },
    "CheckDocumentSigningContent": {
      "title": "CheckDocumentSigningContent",
      "properties": {
        "id": { "type": "string" },
        "name": { "type": "string" },
        "size": { "type": "string" },
        "mimetype": { "type": "string" },
        "type": { "type": "string" }
      },
      "description": "CheckDocumentSigningContent",
      "type": "object"
    },
    "CheckDocumentSigningSignatures": {
      "title": "CheckDocumentSigningSignatures",
      "properties": {
        "id": { "type": "string" },
        "signing_time": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "signature_timestamp_time": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "grace_period_end_time": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "signing_purpose": { "type": "string" },
        "certificate": {
          "$ref": "#/definitions/CheckDocumentSigningCertificate"
        },
        "metadata": { "$ref": "#/definitions/CheckDocumentSigningMetadata" },
        "is_ltv_timestamp": { "type": "boolean", "x-nullable": false },
        "is_archived": { "type": "boolean", "x-nullable": false },
        "is_valid": { "type": "boolean", "x-nullable": false },
        "valid_to": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "signature_value": { "type": "string" }
      },
      "description": "CheckDocumentSigningSignatures",
      "type": "object"
    },
    "CheckDocumentSigningCertificate": {
      "title": "CheckDocumentSigningCertificate",
      "properties": {
        "name": { "type": "string" },
        "subject": { "$ref": "#/definitions/CheckDocumentSigningSubject" },
        "issuer": { "$ref": "#/definitions/CheckDocumentSigningIssuer" },
        "valid_from": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "valid_to": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "value": { "type": "string" }
      },
      "description": "CheckDocumentSigningCertificate",
      "type": "object"
    },
    "CheckDocumentSigningSubject": {
      "title": "CheckDocumentSigningSubject",
      "properties": {
        "organisation_unit": { "type": "string" },
        "country": { "type": "string" },
        "serial_number": { "type": "string" },
        "common_name": { "type": "string" }
      },
      "description": "CheckDocumentSigningSubject",
      "type": "object"
    },
    "CheckDocumentSigningIssuer": {
      "title": "CheckDocumentSigningIssuer",
      "properties": {
        "organisation": { "type": "string" },
        "organisation_unit": { "type": "string" },
        "country": { "type": "string" },
        "serial_number": { "type": "string" },
        "common_name": { "type": "string" }
      },
      "description": "CheckDocumentSigningIssuer",
      "type": "object"
    },
    "CheckDocumentSigningMetadata": {
      "title": "CheckDocumentSigningMetadata",
      "properties": {
        "contact": { "type": "string" },
        "reason": { "type": "string" },
        "location": { "type": "string" }
      },
      "description": "CheckDocumentSigningMetadata",
      "type": "object"
    },
    "SimpleSigningOtpBulkResponse": {
      "title": "SimpleSigningOtpBulkResponse",
      "properties": {
        "Token": { "type": "string" },
        "Message": { "type": "string" },
        "ErrorCode": { "type": "string" }
      },
      "description": "SimpleSigningOtpBulkResponse",
      "type": "object"
    },
    "TaktikalAccessToken": {
      "title": "TaktikalAccessToken",
      "properties": {
        "AccessToken": { "type": "string" },
        "TokenType": { "type": "string" },
        "ExpiresIn": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ExpiresAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "Scope": { "type": "string" }
      },
      "description": "TaktikalAccessToken",
      "type": "object"
    },
    "BulkSignDocumentResponse": {
      "title": "BulkSignDocumentResponse",
      "properties": {
        "control_code": { "type": "string" },
        "error_code": { "type": "string" },
        "lockedBy": { "type": "string" },
        "message": { "type": "string" },
        "signature_type": { "type": "string" },
        "status": { "type": "string" },
        "token": { "type": "string" },
        "valid_until": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "sequenceKey": { "type": "string" },
        "sequenceSigneeKey": { "type": "string" }
      },
      "description": "BulkSignDocumentResponse",
      "type": "object"
    },
    "ValidateResponse": {
      "title": "ValidateResponse",
      "properties": {
        "diagnosticData": { "$ref": "#/definitions/DiagnosticData" },
        "simpleReport": { "$ref": "#/definitions/SimpleReport" },
        "detailedReport": { "$ref": "#/definitions/DetailedReport" },
        "validationReportDataHandler": {
          "$ref": "#/definitions/ValidationReportDataHandler"
        },
        "validationReport": { "type": "string" }
      },
      "description": "ValidateResponse",
      "type": "object"
    },
    "DiagnosticData": {
      "title": "DiagnosticData",
      "properties": {
        "documentName": { "type": "string" },
        "validationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "containerInfo": { "$ref": "#/definitions/ContainerInfo" },
        "signature": {
          "type": "array",
          "items": { "$ref": "#/definitions/Signature" }
        },
        "usedCertificates": {
          "type": "array",
          "items": { "$ref": "#/definitions/Certificate" }
        },
        "usedRevocations": {
          "type": "array",
          "items": { "$ref": "#/definitions/Revocation" }
        },
        "usedTimestamps": {
          "type": "array",
          "items": { "$ref": "#/definitions/Timestamp" }
        },
        "orphanTokens": { "$ref": "#/definitions/OrphanTokens" },
        "originalDocuments": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignerData" }
        },
        "trustedLists": {
          "type": "array",
          "items": { "$ref": "#/definitions/TrustedList" }
        }
      },
      "description": "DiagnosticData",
      "type": "object"
    },
    "ContainerInfo": {
      "title": "ContainerInfo",
      "properties": {
        "containerType": { "type": "string" },
        "zipComment": { "type": "string" },
        "mimeTypeFilePresent": { "type": "boolean", "x-nullable": false },
        "mimeTypeContent": { "type": "string" },
        "manifestFiles": {
          "type": "array",
          "items": { "$ref": "#/definitions/ManifestFile" }
        },
        "contentFiles": { "type": "array", "items": { "type": "string" } }
      },
      "description": "ContainerInfo",
      "type": "object"
    },
    "ManifestFile": {
      "title": "ManifestFile",
      "properties": {
        "filename": { "type": "string" },
        "signatureFilename": { "type": "string" },
        "entries": { "type": "array", "items": { "type": "string" } }
      },
      "description": "ManifestFile",
      "type": "object"
    },
    "Signature": {
      "title": "Signature",
      "properties": {
        "id": { "type": "string" },
        "daidentifier": { "type": "string" },
        "signatureFilename": { "type": "string" },
        "errorMessage": { "type": "string" },
        "claimedSigningTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "signatureFormat": { "type": "string" },
        "structuralValidation": {
          "$ref": "#/definitions/StructuralValidation"
        },
        "digestMatchers": {
          "type": "array",
          "items": { "$ref": "#/definitions/DigestMatcher" }
        },
        "basicSignature": { "$ref": "#/definitions/BasicSignature" },
        "signingCertificate": { "$ref": "#/definitions/SigningCertificate" },
        "certificateChain": {
          "type": "array",
          "items": { "$ref": "#/definitions/ChainItem" }
        },
        "contentType": { "type": "string" },
        "mimeType": { "type": "string" },
        "contentIdentifier": { "type": "string" },
        "contentHints": { "type": "string" },
        "signatureProductionPlace": {
          "$ref": "#/definitions/SignatureProductionPlace"
        },
        "commitmentTypeIndications": {
          "type": "array",
          "items": { "$ref": "#/definitions/CommitmentTypeIndication" }
        },
        "signerRole": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignerRole" }
        },
        "policy": { "$ref": "#/definitions/Policy" },
        "signaturePolicyStore": {
          "$ref": "#/definitions/SignaturePolicyStore"
        },
        "signerInformationStore": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignerInfo" }
        },
        "signerDocumentRepresentations": {
          "$ref": "#/definitions/SignerDocumentRepresentations"
        },
        "foundCertificates": { "$ref": "#/definitions/FoundCertificates" },
        "foundRevocations": { "$ref": "#/definitions/FoundRevocations" },
        "foundTimestamps": {
          "type": "array",
          "items": { "$ref": "#/definitions/FoundTimestamp" }
        },
        "signatureScopes": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignatureScope" }
        },
        "signatureDigestReference": {
          "$ref": "#/definitions/SignatureDigestReference"
        },
        "dataToBeSignedRepresentation": {
          "$ref": "#/definitions/DigestAlgoAndValue"
        },
        "signatureValue": { "type": "array", "items": { "type": "string" } },
        "counterSignature": { "type": "boolean", "x-nullable": false },
        "duplicated": { "type": "boolean", "x-nullable": false },
        "pdfrevision": { "$ref": "#/definitions/Pdfrevision" }
      },
      "description": "Signature",
      "type": "object"
    },
    "StructuralValidation": {
      "title": "StructuralValidation",
      "properties": {
        "messages": { "type": "array", "items": { "type": "string" } },
        "valid": { "type": "boolean", "x-nullable": false }
      },
      "description": "StructuralValidation",
      "type": "object"
    },
    "DigestMatcher": {
      "title": "DigestMatcher",
      "properties": {
        "dataFound": { "type": "boolean", "x-nullable": false },
        "dataIntact": { "type": "boolean", "x-nullable": false },
        "digestMethod": { "type": "string" },
        "digestValue": { "type": "string" },
        "match": { "type": "boolean", "x-nullable": false },
        "type": { "type": "string" },
        "name": { "type": "string" },
        "duplicated": { "type": "boolean", "x-nullable": false }
      },
      "description": "DigestMatcher",
      "type": "object"
    },
    "BasicSignature": {
      "title": "BasicSignature",
      "properties": {
        "encryptionAlgoUsedToSignThisToken": { "type": "string" },
        "keyLengthUsedToSignThisToken": { "type": "string" },
        "digestAlgoUsedToSignThisToken": { "type": "string" },
        "maskGenerationFunctionUsedToSignThisToken": { "type": "string" },
        "signatureIntact": { "type": "boolean", "x-nullable": false },
        "signatureValid": { "type": "boolean", "x-nullable": false }
      },
      "description": "BasicSignature",
      "type": "object"
    },
    "SigningCertificate": {
      "title": "SigningCertificate",
      "properties": {
        "publicKey": { "type": "array", "items": { "type": "string" } },
        "certificate": { "$ref": "#/definitions/Certificate" }
      },
      "description": "SigningCertificate",
      "type": "object"
    },
    "Certificate": {
      "title": "Certificate",
      "properties": {
        "id": { "type": "string" },
        "qualifiedName": { "type": "string" }
      },
      "description": "Certificate",
      "type": "object"
    },
    "ChainItem": {
      "title": "ChainItem",
      "properties": {
        "source": { "type": "string" },
        "id": { "type": "string" }
      },
      "description": "ChainItem",
      "type": "object"
    },
    "SignatureProductionPlace": {
      "title": "SignatureProductionPlace",
      "properties": {
        "postalAddress": { "type": "array", "items": { "type": "string" } },
        "city": { "type": "string" },
        "stateOrProvince": { "type": "string" },
        "postOfficeBoxNumber": { "type": "string" },
        "postalCode": { "type": "string" },
        "countryName": { "type": "string" },
        "streetAddress": { "type": "string" }
      },
      "description": "SignatureProductionPlace",
      "type": "object"
    },
    "CommitmentTypeIndication": {
      "title": "CommitmentTypeIndication",
      "properties": {
        "identifier": { "type": "string" },
        "description": { "type": "string" },
        "documentationReferences": {
          "type": "array",
          "items": { "type": "string" }
        }
      },
      "description": "CommitmentTypeIndication",
      "type": "object"
    },
    "SignerRole": {
      "title": "SignerRole",
      "properties": {
        "role": { "type": "string" },
        "notAfter": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "notBefore": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "category": { "type": "string" }
      },
      "description": "SignerRole",
      "type": "object"
    },
    "Policy": {
      "title": "Policy",
      "properties": {
        "id": { "type": "string" },
        "url": { "type": "string" },
        "description": { "type": "string" },
        "notice": { "type": "string" },
        "zeroHash": { "type": "boolean", "x-nullable": false },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" },
        "asn1Processable": { "type": "boolean", "x-nullable": false },
        "transformations": { "type": "array", "items": { "type": "string" } },
        "identified": { "type": "boolean", "x-nullable": false },
        "status": { "type": "boolean", "x-nullable": false },
        "processingError": { "type": "string" },
        "digestAlgorithmsEqual": { "type": "boolean", "x-nullable": false },
        "documentationReferences": {
          "type": "array",
          "items": { "type": "string" }
        }
      },
      "description": "Policy",
      "type": "object"
    },
    "DigestAlgoAndValue": {
      "title": "DigestAlgoAndValue",
      "properties": {
        "digestMethod": { "type": "string" },
        "digestValue": { "type": "string" },
        "match": { "type": "boolean", "x-nullable": false }
      },
      "description": "DigestAlgoAndValue",
      "type": "object"
    },
    "SignaturePolicyStore": {
      "title": "SignaturePolicyStore",
      "properties": {
        "id": { "type": "string" },
        "description": { "type": "string" },
        "documentationReferences": {
          "type": "array",
          "items": { "type": "string" }
        },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" }
      },
      "description": "SignaturePolicyStore",
      "type": "object"
    },
    "SignerInfo": {
      "title": "SignerInfo",
      "properties": {
        "issuerName": { "type": "string" },
        "serialNumber": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "ski": { "type": "array", "items": { "type": "string" } },
        "current": { "type": "boolean", "x-nullable": false }
      },
      "description": "SignerInfo",
      "type": "object"
    },
    "SignerDocumentRepresentations": {
      "title": "SignerDocumentRepresentations",
      "properties": {
        "hashOnly": { "type": "boolean", "x-nullable": false },
        "docHashOnly": { "type": "boolean", "x-nullable": false }
      },
      "description": "SignerDocumentRepresentations",
      "type": "object"
    },
    "FoundCertificates": {
      "title": "FoundCertificates",
      "properties": {
        "relatedCertificates": {
          "type": "array",
          "items": { "$ref": "#/definitions/RelatedCertificate" }
        },
        "orphanCertificates": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrphanCertificate" }
        }
      },
      "description": "FoundCertificates",
      "type": "object"
    },
    "RelatedCertificate": {
      "title": "RelatedCertificate",
      "properties": {
        "origins": {
          "type": "array",
          "items": { "type": "string", "x-nullable": false }
        },
        "certificateRefs": {
          "type": "array",
          "items": { "$ref": "#/definitions/CertificateRef" }
        },
        "certificate": { "$ref": "#/definitions/Certificate" }
      },
      "description": "RelatedCertificate",
      "type": "object"
    },
    "CertificateRef": {
      "title": "CertificateRef",
      "properties": {
        "origin": { "type": "string" },
        "issuerSerial": { "$ref": "#/definitions/IssuerSerial" },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" },
        "serialInfo": { "$ref": "#/definitions/SignerInfo" }
      },
      "description": "CertificateRef",
      "type": "object"
    },
    "IssuerSerial": {
      "title": "IssuerSerial",
      "properties": {
        "value": { "type": "array", "items": { "type": "string" } },
        "match": { "type": "boolean", "x-nullable": false }
      },
      "description": "IssuerSerial",
      "type": "object"
    },
    "OrphanCertificate": {
      "title": "OrphanCertificate",
      "properties": {
        "origins": {
          "type": "array",
          "items": { "type": "string", "x-nullable": false }
        },
        "certificateRefs": {
          "type": "array",
          "items": { "$ref": "#/definitions/CertificateRef" }
        },
        "token": { "$ref": "#/definitions/OrphanCertificateToken" }
      },
      "description": "OrphanCertificate",
      "type": "object"
    },
    "OrphanCertificateToken": {
      "title": "OrphanCertificateToken",
      "properties": {
        "id": { "type": "string" },
        "base64Encoded": { "type": "string" },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" }
      },
      "description": "OrphanCertificateToken",
      "type": "object"
    },
    "FoundRevocations": {
      "title": "FoundRevocations",
      "properties": {
        "relatedRevocations": {
          "type": "array",
          "items": { "$ref": "#/definitions/RelatedRevocation" }
        },
        "orphanRevocations": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrphanRevocation" }
        }
      },
      "description": "FoundRevocations",
      "type": "object"
    },
    "RelatedRevocation": {
      "title": "RelatedRevocation",
      "properties": {
        "type": { "type": "string" },
        "origins": {
          "type": "array",
          "items": { "type": "string", "x-nullable": false }
        },
        "revocationRefs": {
          "type": "array",
          "items": { "$ref": "#/definitions/RevocationRef" }
        },
        "revocation": { "$ref": "#/definitions/Revocation" }
      },
      "description": "RelatedRevocation",
      "type": "object"
    },
    "RevocationRef": {
      "title": "RevocationRef",
      "properties": {
        "origins": { "type": "array", "items": { "type": "string" } },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" },
        "producedAt": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "responderId": { "$ref": "#/definitions/SignerInfo" }
      },
      "description": "RevocationRef",
      "type": "object"
    },
    "Revocation": {
      "title": "Revocation",
      "properties": {
        "id": { "type": "string" },
        "origin": { "type": "string" },
        "type": { "type": "string" },
        "sourceAddress": { "type": "string" },
        "productionDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "thisUpdate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "nextUpdate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "expiredCertsOnCRL": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "archiveCutOff": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "certHashExtensionPresent": { "type": "boolean", "x-nullable": false },
        "certHashExtensionMatch": { "type": "boolean", "x-nullable": false },
        "basicSignature": { "$ref": "#/definitions/BasicSignature" },
        "signingCertificate": { "$ref": "#/definitions/SigningCertificate" },
        "certificateChain": {
          "type": "array",
          "items": { "$ref": "#/definitions/ChainItem" }
        },
        "foundCertificates": { "$ref": "#/definitions/FoundCertificates" },
        "base64Encoded": { "type": "array", "items": { "type": "string" } },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" }
      },
      "description": "Revocation",
      "type": "object"
    },
    "OrphanRevocation": {
      "title": "OrphanRevocation",
      "properties": {
        "type": { "type": "string" },
        "origins": {
          "type": "array",
          "items": { "type": "string", "x-nullable": false }
        },
        "revocationRefs": {
          "type": "array",
          "items": { "$ref": "#/definitions/RevocationRef" }
        },
        "token": { "$ref": "#/definitions/OrphanRevocationToken" },
        "id": { "type": "string" },
        "base64Encoded": { "type": "array", "items": { "type": "string" } },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" }
      },
      "description": "OrphanRevocation",
      "type": "object"
    },
    "OrphanRevocationToken": {
      "title": "OrphanRevocationToken",
      "properties": {
        "id": { "type": "string" },
        "SignatureValue": { "type": "array", "items": { "type": "string" } },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" },
        "type": { "type": "string" }
      },
      "description": "OrphanRevocationToken",
      "type": "object"
    },
    "FoundTimestamp": {
      "title": "FoundTimestamp",
      "properties": { "timestamp": { "$ref": "#/definitions/Timestamp" } },
      "description": "FoundTimestamp",
      "type": "object"
    },
    "Timestamp": {
      "title": "Timestamp",
      "properties": {
        "id": { "type": "string" },
        "timestampFilename": { "type": "string" },
        "archiveTimestampType": { "type": "string" },
        "productionTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "digestMatchers": {
          "type": "array",
          "items": { "$ref": "#/definitions/DigestMatcher" }
        },
        "basicSignature": { "$ref": "#/definitions/BasicSignature" },
        "signingCertificate": { "$ref": "#/definitions/SigningCertificate" },
        "certificateChain": {
          "type": "array",
          "items": { "$ref": "#/definitions/ChainItem" }
        },
        "signerInformationStore": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignerInfo" }
        },
        "foundCertificates": { "$ref": "#/definitions/FoundCertificates" },
        "foundRevocations": { "$ref": "#/definitions/FoundRevocations" },
        "timestampedObjects": {
          "type": "array",
          "items": { "$ref": "#/definitions/TimestampedObject" }
        },
        "base64Encoded": { "type": "array", "items": { "type": "string" } },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" },
        "type": { "type": "string" },
        "pdfrevision": { "$ref": "#/definitions/Pdfrevision" }
      },
      "description": "Timestamp",
      "type": "object"
    },
    "TimestampedObject": {
      "title": "TimestampedObject",
      "properties": {
        "token": { "$ref": "#/definitions/AbstractToken" },
        "category": { "type": "string" }
      },
      "description": "TimestampedObject",
      "type": "object"
    },
    "AbstractToken": {
      "title": "AbstractToken",
      "properties": { "id": { "type": "string" } },
      "description": "AbstractToken",
      "type": "object"
    },
    "Pdfrevision": {
      "title": "Pdfrevision",
      "properties": {
        "signatureFieldName": {
          "type": "array",
          "items": { "type": "string" }
        },
        "modificationDetection": {
          "$ref": "#/definitions/ModificationDetection"
        },
        "pdfsignatureDictionary": {
          "$ref": "#/definitions/PdfsignatureDictionary"
        }
      },
      "description": "Pdfrevision",
      "type": "object"
    },
    "ModificationDetection": {
      "title": "ModificationDetection",
      "properties": {
        "annotationOverlap": {
          "type": "array",
          "items": { "$ref": "#/definitions/Modification" }
        },
        "visualDifference": {
          "type": "array",
          "items": { "$ref": "#/definitions/Modification" }
        },
        "pageDifference": {
          "type": "array",
          "items": { "$ref": "#/definitions/Modification" }
        }
      },
      "description": "ModificationDetection",
      "type": "object"
    },
    "Modification": {
      "title": "Modification",
      "properties": {
        "page": { "type": "integer", "format": "int32", "x-nullable": false }
      },
      "description": "Modification",
      "type": "object"
    },
    "PdfsignatureDictionary": {
      "title": "PdfsignatureDictionary",
      "properties": {
        "signerName": { "type": "string" },
        "type": { "type": "string" },
        "filter": { "type": "string" },
        "subFilter": { "type": "string" },
        "contactInfo": { "type": "string" },
        "location": { "type": "string" },
        "reason": { "type": "string" },
        "signatureByteRange": {
          "type": "array",
          "items": { "type": "integer", "format": "int32", "x-nullable": false }
        }
      },
      "description": "PdfsignatureDictionary",
      "type": "object"
    },
    "SignatureScope": {
      "title": "SignatureScope",
      "properties": {
        "scope": { "type": "string" },
        "name": { "type": "string" },
        "value": { "type": "string" },
        "description": { "type": "string" },
        "transformations": { "type": "array", "items": { "type": "string" } },
        "signerData": { "$ref": "#/definitions/SignerData" }
      },
      "description": "SignatureScope",
      "type": "object"
    },
    "SignerData": {
      "title": "SignerData",
      "properties": {
        "id": { "type": "string" },
        "referencedName": { "type": "string" },
        "digestAlgoAndValue": { "$ref": "#/definitions/DigestAlgoAndValue" }
      },
      "description": "SignerData",
      "type": "object"
    },
    "SignatureDigestReference": {
      "title": "SignatureDigestReference",
      "properties": {
        "canonicalizationMethod": { "type": "string" },
        "digestMethod": { "type": "string" },
        "digestValue": { "type": "array", "items": { "type": "string" } }
      },
      "description": "SignatureDigestReference",
      "type": "object"
    },
    "OrphanTokens": {
      "title": "OrphanTokens",
      "properties": {
        "orphanCertificates": {
          "$ref": "#/definitions/OrphanCertificateToken"
        },
        "orphanRevocations": { "$ref": "#/definitions/OrphanCertificateToken" }
      },
      "description": "OrphanTokens",
      "type": "object"
    },
    "TrustedList": {
      "title": "TrustedList",
      "properties": {
        "countryCode": { "type": "string" },
        "url": { "type": "string" },
        "sequenceNumber": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "lastLoading": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "nextUpdate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "wellSigned": { "type": "boolean", "x-nullable": false },
        "id": { "type": "string" },
        "lotl": { "type": "boolean", "x-nullable": false }
      },
      "description": "TrustedList",
      "type": "object"
    },
    "SimpleReport": {
      "title": "SimpleReport",
      "properties": {
        "validationPolicy": { "$ref": "#/definitions/ValidationPolicy" },
        "documentName": { "type": "string" },
        "validSignaturesCount": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "signaturesCount": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "containerType": { "type": "string" },
        "signatureOrTimestamp": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignatureOrTimestamp" }
        },
        "semantic": {
          "type": "array",
          "items": { "$ref": "#/definitions/Semantic" }
        },
        "validationTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "SimpleReport",
      "type": "object"
    },
    "ValidationPolicy": {
      "title": "ValidationPolicy",
      "properties": {
        "policyName": { "type": "string" },
        "policyDescription": { "type": "string" }
      },
      "description": "ValidationPolicy",
      "type": "object"
    },
    "SignatureOrTimestamp": {
      "title": "SignatureOrTimestamp",
      "properties": {
        "signature": {
          "type": "array",
          "items": { "$ref": "#/definitions/SimpleReportSignature" }
        },
        "timestamp": {
          "type": "array",
          "items": { "$ref": "#/definitions/SimpleReportTimeStamp" }
        }
      },
      "description": "SignatureOrTimestamp",
      "type": "object"
    },
    "SimpleReportSignature": {
      "title": "SimpleReportSignature",
      "properties": {
        "signingTime": { "type": "string", "format": "date-time" },
        "bestSignatureTime": { "type": "string", "format": "date-time" },
        "signedBy": { "type": "string" },
        "signatureLevel": { "$ref": "#/definitions/ValueDescription" },
        "signatureScope": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignatureScope" }
        },
        "timestamps": {
          "type": "array",
          "items": { "$ref": "#/definitions/Timestamp" }
        },
        "counterSignature": { "type": "boolean", "x-nullable": false },
        "parentId": { "type": "string" },
        "signatureFormat": { "type": "string" },
        "extensionPeriodMax": { "type": "string", "format": "date-time" },
        "extensionPeriodMin": { "type": "string", "format": "date-time" },
        "filename": { "type": "string" },
        "certificateChain": { "$ref": "#/definitions/CertificateChain" },
        "indication": { "type": "string" },
        "subIndication": { "type": "string" },
        "errors": { "type": "array", "items": { "type": "string" } },
        "warnings": { "type": "array", "items": { "type": "string" } },
        "infos": { "type": "array", "items": { "type": "string" } },
        "id": { "type": "string" }
      },
      "description": "SimpleReportSignature",
      "type": "object"
    },
    "ValueDescription": {
      "title": "ValueDescription",
      "properties": {
        "value": { "type": "string" },
        "description": { "type": "string" },
        "lang": { "type": "string" }
      },
      "description": "ValueDescription",
      "type": "object"
    },
    "CertificateChain": {
      "title": "CertificateChain",
      "properties": {
        "chainItem": {
          "type": "array",
          "items": { "$ref": "#/definitions/ChainItem" }
        },
        "certificate": {
          "type": "array",
          "items": { "$ref": "#/definitions/Certificate" }
        }
      },
      "description": "CertificateChain",
      "type": "object"
    },
    "SimpleReportTimeStamp": {
      "title": "SimpleReportTimeStamp",
      "properties": {
        "productionTime": { "type": "string", "format": "date-time" },
        "producedBy": { "type": "string" },
        "timestampLevel": { "$ref": "#/definitions/TimestampLevel" },
        "filename": { "type": "string" },
        "certificateChain": { "$ref": "#/definitions/CertificateChain" },
        "indication": { "type": "string" },
        "subIndication": { "type": "string" },
        "errors": { "type": "array", "items": { "type": "string" } },
        "warnings": { "type": "array", "items": { "type": "string" } },
        "infos": { "type": "array", "items": { "type": "string" } },
        "id": { "type": "string" }
      },
      "description": "SimpleReportTimeStamp",
      "type": "object"
    },
    "TimestampLevel": {
      "title": "TimestampLevel",
      "properties": {
        "timestampQualification": { "type": "string" },
        "description": { "type": "string" }
      },
      "description": "TimestampLevel",
      "type": "object"
    },
    "Semantic": {
      "title": "Semantic",
      "properties": {
        "value": { "type": "string" },
        "key": { "type": "string" }
      },
      "description": "Semantic",
      "type": "object"
    },
    "DetailedReport": {
      "title": "DetailedReport",
      "properties": {
        "signatureOrTimestampOrCertificate": {
          "type": "array",
          "items": { "$ref": "#/definitions/SignatureOrTimestampOrCertificate" }
        },
        "basicBuildingBlocks": {
          "type": "array",
          "items": { "$ref": "#/definitions/BasicBuildingBlock" }
        },
        "semantic": {
          "type": "array",
          "items": { "$ref": "#/definitions/Semantic" }
        },
        "tlanalysis": {
          "type": "array",
          "items": { "$ref": "#/definitions/TLanalysis" }
        },
        "validationTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "DetailedReport",
      "type": "object"
    },
    "SignatureOrTimestampOrCertificate": {
      "title": "SignatureOrTimestampOrCertificate",
      "properties": {
        "signature": {
          "type": "array",
          "items": { "$ref": "#/definitions/DetailedReportSignature" }
        }
      },
      "description": "SignatureOrTimestampOrCertificate",
      "type": "object"
    },
    "DetailedReportSignature": {
      "title": "DetailedReportSignature",
      "properties": {
        "validationProcessBasicSignature": {
          "$ref": "#/definitions/ValidationProcessBasicSignature"
        },
        "timestamp": {
          "type": "array",
          "items": { "$ref": "#/definitions/DetailedReportTimestamp" }
        },
        "validationProcessLongTermData": {
          "$ref": "#/definitions/ValidationProcessLongTermData"
        },
        "validationProcessArchivalData": {
          "$ref": "#/definitions/ValidationProcessArchivalData"
        },
        "validationSignatureQualification": {
          "$ref": "#/definitions/ValidationSignatureQualification"
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "Id": { "type": "string" },
        "counterSignature": { "type": "boolean" },
        "filename": { "type": "string" },
        "certificateChain": { "$ref": "#/definitions/CertificateChain" },
        "indication": { "type": "string" },
        "subIndication": { "type": "string" },
        "errors": { "type": "array", "items": { "type": "string" } },
        "warnings": { "type": "array", "items": { "type": "string" } },
        "infos": { "type": "array", "items": { "type": "string" } }
      },
      "description": "DetailedReportSignature",
      "type": "object"
    },
    "ValidationProcessBasicSignature": {
      "title": "ValidationProcessBasicSignature",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "proofOfExistence": { "$ref": "#/definitions/ProofOfExistence" }
      },
      "description": "ValidationProcessBasicSignature",
      "type": "object"
    },
    "Constraint": {
      "title": "Constraint",
      "properties": {
        "name": { "$ref": "#/definitions/Name" },
        "status": { "type": "string" },
        "error": { "$ref": "#/definitions/Name" },
        "warning": { "$ref": "#/definitions/Name" },
        "info": { "$ref": "#/definitions/Name" },
        "additionalInfo": { "type": "string" },
        "id": { "type": "string" }
      },
      "description": "Constraint",
      "type": "object"
    },
    "Name": {
      "title": "Name",
      "properties": {
        "value": { "type": "string" },
        "nameId": { "type": "string" },
        "lang": { "type": "string" }
      },
      "description": "Name",
      "type": "object"
    },
    "Conclusion": {
      "title": "Conclusion",
      "properties": {
        "indication": { "type": "string" },
        "subIndication": { "type": "string" },
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Name" }
        },
        "warnings": {
          "type": "array",
          "items": { "$ref": "#/definitions/Name" }
        },
        "infos": { "type": "array", "items": { "$ref": "#/definitions/Name" } }
      },
      "description": "Conclusion",
      "type": "object"
    },
    "ProofOfExistence": {
      "title": "ProofOfExistence",
      "properties": { "constraint": { "type": "string" } },
      "description": "ProofOfExistence",
      "type": "object"
    },
    "DetailedReportTimestamp": {
      "title": "DetailedReportTimestamp",
      "properties": {
        "ValidationProcessTimestamp": {
          "$ref": "#/definitions/ValidationProcessTimestamp"
        },
        "validationTimestampQualification": {
          "type": "array",
          "items": { "$ref": "#/definitions/ValidationTimestampQualification" }
        },
        "id": { "type": "string" }
      },
      "description": "DetailedReportTimestamp",
      "type": "object"
    },
    "ValidationProcessTimestamp": {
      "title": "ValidationProcessTimestamp",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "type": { "type": "string" },
        "productionTime": { "type": "string" }
      },
      "description": "ValidationProcessTimestamp",
      "type": "object"
    },
    "ValidationTimestampQualification": {
      "title": "ValidationTimestampQualification",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "timestampQualification": { "type": "string" }
      },
      "description": "ValidationTimestampQualification",
      "type": "object"
    },
    "ValidationProcessLongTermData": {
      "title": "ValidationProcessLongTermData",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "proofOfExistence": { "$ref": "#/definitions/ProofOfExistence" }
      },
      "description": "ValidationProcessLongTermData",
      "type": "object"
    },
    "ValidationProcessArchivalData": {
      "title": "ValidationProcessArchivalData",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "proofOfExistence": { "$ref": "#/definitions/ProofOfExistence" }
      },
      "description": "ValidationProcessArchivalData",
      "type": "object"
    },
    "ValidationSignatureQualification": {
      "title": "ValidationSignatureQualification",
      "properties": {
        "validationCertificateQualification": {
          "$ref": "#/definitions/ValidationCertificateQualification"
        },
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "signatureQualification": { "type": "string" }
      },
      "description": "ValidationSignatureQualification",
      "type": "object"
    },
    "ValidationCertificateQualification": {
      "title": "ValidationCertificateQualification",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "Id": { "type": "string" },
        "dateTime": { "type": "string", "format": "date-time" },
        "validationTime": { "type": "string" },
        "certificateQualification": { "type": "string" }
      },
      "description": "ValidationCertificateQualification",
      "type": "object"
    },
    "BasicBuildingBlock": {
      "title": "BasicBuildingBlock",
      "properties": {
        "fc": { "$ref": "#/definitions/Fc" },
        "isc": { "$ref": "#/definitions/Isc" },
        "vci": { "$ref": "#/definitions/Vci" },
        "xcv": { "$ref": "#/definitions/Xcv" },
        "cv": { "$ref": "#/definitions/Cv" },
        "sav": { "$ref": "#/definitions/Sav" },
        "psv": { "$ref": "#/definitions/Psv" },
        "pcv": { "$ref": "#/definitions/Pcv" },
        "vts": { "$ref": "#/definitions/Vts" },
        "certificateChain": { "$ref": "#/definitions/CertificateChain" },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "id": { "type": "string" },
        "type": { "type": "string" }
      },
      "description": "BasicBuildingBlock",
      "type": "object"
    },
    "Fc": {
      "title": "Fc",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" }
      },
      "description": "Fc",
      "type": "object"
    },
    "Isc": {
      "title": "Isc",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "certificateChain": { "$ref": "#/definitions/CertificateChain" }
      },
      "description": "Isc",
      "type": "object"
    },
    "Vci": {
      "title": "Vci",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" }
      },
      "description": "Vci",
      "type": "object"
    },
    "Xcv": {
      "title": "Xcv",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "subXCV": {
          "type": "array",
          "items": { "$ref": "#/definitions/SubXCV" }
        }
      },
      "description": "Xcv",
      "type": "object"
    },
    "SubXCV": {
      "title": "SubXCV",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "crossCertificates": { "type": "array", "items": { "type": "string" } },
        "equivalentCertificates": {
          "type": "array",
          "items": { "type": "string" }
        },
        "rac": { "type": "array", "items": { "$ref": "#/definitions/Rac" } },
        "rfc": { "$ref": "#/definitions/Rfc" },
        "revocationInfo": { "$ref": "#/definitions/RevocationInfo" },
        "id": { "type": "string" },
        "trustAnchor": { "type": "boolean", "x-nullable": false },
        "selfSigned": { "type": "boolean", "x-nullable": false }
      },
      "description": "SubXCV",
      "type": "object"
    },
    "Rac": {
      "title": "Rac",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "revocationProductionDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "id": { "type": "string" }
      },
      "description": "Rac",
      "type": "object"
    },
    "Rfc": {
      "title": "Rfc",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "id": { "type": "string" }
      },
      "description": "Rfc",
      "type": "object"
    },
    "RevocationInfo": {
      "title": "RevocationInfo",
      "properties": {
        "certificateId": { "type": "string" },
        "revocationId": { "type": "string" },
        "reason": { "type": "string" },
        "revocationDate": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "RevocationInfo",
      "type": "object"
    },
    "Cv": {
      "title": "Cv",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" }
      },
      "description": "Cv",
      "type": "object"
    },
    "Sav": {
      "title": "Sav",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "cryptographicInfo": {
          "$ref": "#/definitions/CryptographicInformation"
        },
        "validationTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "Sav",
      "type": "object"
    },
    "CryptographicInformation": {
      "title": "CryptographicInformation",
      "properties": {
        "algorithm": { "type": "string" },
        "keyLength": { "type": "string" },
        "secure": { "type": "boolean", "x-nullable": false },
        "notAfter": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "concernedMaterial": { "type": "string" }
      },
      "description": "CryptographicInformation",
      "type": "object"
    },
    "Psv": {
      "title": "Psv",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "controlTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "Psv",
      "type": "object"
    },
    "Pcv": {
      "title": "Pcv",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "controlTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "Pcv",
      "type": "object"
    },
    "Vts": {
      "title": "Vts",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "controlTime": {
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        }
      },
      "description": "Vts",
      "type": "object"
    },
    "TLanalysis": {
      "title": "TLanalysis",
      "properties": {
        "constraint": {
          "type": "array",
          "items": { "$ref": "#/definitions/Constraint" }
        },
        "conclusion": { "$ref": "#/definitions/Conclusion" },
        "title": { "type": "string" },
        "countryCode": { "type": "string" },
        "url": { "type": "string" },
        "id": { "type": "string" }
      },
      "description": "TLanalysis",
      "type": "object"
    },
    "ValidationReportDataHandler": {
      "title": "ValidationReportDataHandler",
      "properties": {
        "dataSource": { "$ref": "#/definitions/DataSource" },
        "name": { "type": "string" },
        "inputStream": { "$ref": "#/definitions/InputStream" },
        "content": { "$ref": "#/definitions/Content" },
        "preferredCommands": {
          "type": "array",
          "items": { "$ref": "#/definitions/PreferredCommand" }
        },
        "allCommands": {
          "type": "array",
          "items": { "$ref": "#/definitions/AllCommand" }
        },
        "transferDataFlavors": {
          "type": "array",
          "items": { "$ref": "#/definitions/TransferDataFlavor" }
        },
        "contentType": { "type": "string" },
        "outputStream": { "$ref": "#/definitions/OutputStream" }
      },
      "description": "ValidationReportDataHandler",
      "type": "object"
    },
    "DataSource": {
      "title": "DataSource",
      "properties": {
        "name": { "type": "string" },
        "inputStream": { "$ref": "#/definitions/InputStream" },
        "contentType": { "type": "string" },
        "outputStream": { "$ref": "#/definitions/OutputStream" }
      },
      "description": "DataSource",
      "type": "object"
    },
    "InputStream": {
      "title": "InputStream",
      "properties": {},
      "description": "InputStream",
      "type": "object"
    },
    "OutputStream": {
      "title": "OutputStream",
      "properties": {},
      "description": "OutputStream",
      "type": "object"
    },
    "Content": {
      "title": "Content",
      "properties": {},
      "description": "Content",
      "type": "object"
    },
    "PreferredCommand": {
      "title": "PreferredCommand",
      "properties": {
        "commandName": { "type": "string" },
        "commandClass": { "type": "string" }
      },
      "description": "PreferredCommand",
      "type": "object"
    },
    "AllCommand": {
      "title": "AllCommand",
      "properties": {
        "commandName": { "type": "string" },
        "commandClass": { "type": "string" }
      },
      "description": "AllCommand",
      "type": "object"
    },
    "TransferDataFlavor": {
      "title": "TransferDataFlavor",
      "properties": {
        "mimeType": { "type": "string" },
        "humanPresentableName": { "type": "string" },
        "subType": { "type": "string" },
        "primaryType": { "type": "string" },
        "representationClassInputStream": {
          "type": "boolean",
          "x-nullable": false
        },
        "representationClassByteBuffer": {
          "type": "boolean",
          "x-nullable": false
        },
        "flavorTextType": { "type": "boolean", "x-nullable": false },
        "representationClassReader": { "type": "boolean", "x-nullable": false },
        "representationClassCharBuffer": {
          "type": "boolean",
          "x-nullable": false
        },
        "mimeTypeSerializedObject": { "type": "boolean", "x-nullable": false },
        "defaultRepresentationClassAsString": { "type": "string" },
        "representationClassSerializable": {
          "type": "boolean",
          "x-nullable": false
        },
        "representationClassRemote": { "type": "boolean", "x-nullable": false },
        "flavorSerializedObjectType": {
          "type": "boolean",
          "x-nullable": false
        },
        "flavorRemoteObjectType": { "type": "boolean", "x-nullable": false },
        "flavorJavaFileListType": { "type": "boolean", "x-nullable": false }
      },
      "description": "TransferDataFlavor",
      "type": "object"
    },
    "AuthenticateResponse": {
      "title": "AuthenticateResponse",
      "properties": {
        "UserId": { "type": "string" },
        "SessionId": { "type": "string" },
        "UserName": { "type": "string" },
        "DisplayName": { "type": "string" },
        "ReferrerUrl": { "type": "string" },
        "BearerToken": { "type": "string" },
        "RefreshToken": { "type": "string" },
        "ProfileUrl": { "type": "string" },
        "Roles": { "type": "array", "items": { "type": "string" } },
        "Permissions": { "type": "array", "items": { "type": "string" } },
        "ResponseStatus": { "$ref": "#/definitions/ResponseStatus" },
        "Meta": { "$ref": "#/definitions/Dictionary_String_String_" }
      },
      "description": "AuthenticateResponse",
      "type": "object"
    }
  },
  "parameters": {
    "Accept": {
      "name": "Accept",
      "in": "header",
      "description": "Accept Header",
      "type": "string",
      "required": true,
      "enum": ["application/json"]
    }
  },
  "securityDefinitions": { "basic": { "type": "basic" } },
  "tags": [
    { "name": "auth", "description": "ApiResource: Auth" },
    { "name": "company", "description": "ApiResource: Company" },
    { "name": "contacts", "description": "ApiResource: Contacts" },
    { "name": "customer" },
    { "name": "document sealing", "description": "ApiResource: Sealing" },
    { "name": "email template", "description": "ApiResource: EmailTemplate" },
    { "name": "flow", "description": "ApiResource: Flow" },
    { "name": "pdf", "description": "ApiResource: Pdf" },
    { "name": "signing", "description": "ApiResource: Signing" },
    { "name": "signing activity", "description": "ApiResource: Signing" },
    { "name": "signing process attachment" },
    { "name": "statistics", "description": "ApiResource: Statistics" },
    { "name": "users" },
    { "name": "validation" },
    { "name": "webhook", "description": "ApiResource: WebHook" }
  ]
}
