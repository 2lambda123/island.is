#####################################################################
#
# Do not edit this file manually, it is automatically generated.
# Run "yarn charts" instead.
#
#####################################################################
namespaces:
  namespaces:
    - 'application-system'
    - 'service-portal'
    - 'portals-admin'
    - 'samradsgatt'
    - 'islandis'
    - 'search-indexer'
    - 'xroad-collector'
    - 'skilavottord'
    - 'services-documents'
    - 'storybook'
    - 'contentful-translation-extension'
    - 'download-service'
    - 'icelandic-names-registry'
    - 'endorsement-system'
    - 'air-discount-scheme'
    - 'github-actions-cache'
    - 'user-notification'
    - 'external-contracts-tests'
    - 'contentful-entry-tagger'
application-system-api:
  metadata:
    name: 'application-system-api'
    namespace: 'application-system'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'application-system-api'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-api'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'application-system-api'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-api'
        annotations:
          ad.datadoghq.com/application-system-api.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'application-system-api'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-api'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          XROAD_PROPERTIES_CLIENT_SECRET:
            valueFrom:
              secretKeyRef:
                name: 'XROAD_PROPERTIES_CLIENT_SECRET'
                key: '/k8s/xroad/client/NATIONAL-REGISTRY/IDENTITYSERVER_SECRET'
        resources:
          limits:
            cpu: '400m'
            memory: '1024Mi'
          requests:
            cpu: '100m'
            memory: '512Mi'
        command:
          - 'node'
        args:
          - 'main.js'
        volumeMounts:
          - name: 'islyklar.p12'
            mountPath: '/etc/config/islyklar.p12'
      serviceAccountName: 'application-system-api'
      initContainers:
        - args:
            - 'sequelize-cli'
            - 'db:migrate'
          command:
            - 'npx'
          image: ''
          env:
            NO_UPDATE_NOTIFIER: 'true'
application-system-form:
  metadata:
    name: 'application-system-form'
    namespace: 'application-system'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'application-system-form'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-form'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'application-system-form'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-form'
        annotations:
          ad.datadoghq.com/application-system-form.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'application-system-form'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-form'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          SI_PUBLIC_DD_RUM_CLIENT_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'SI_PUBLIC_DD_RUM_CLIENT_TOKEN'
                key: '/k8s/DD_RUM_CLIENT_TOKEN'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
service-portal:
  metadata:
    name: 'service-portal'
    namespace: 'service-portal'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'service-portal'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/service-portal'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'service-portal'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/service-portal'
        annotations:
          ad.datadoghq.com/service-portal.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'service-portal'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/service-portal'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          SI_PUBLIC_DD_RUM_CLIENT_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'SI_PUBLIC_DD_RUM_CLIENT_TOKEN'
                key: '/k8s/DD_RUM_CLIENT_TOKEN'
        resources:
          limits:
            cpu: '400m'
            memory: '512Mi'
          requests:
            cpu: '200m'
            memory: '256Mi'
service-portal-api:
  metadata:
    name: 'service-portal-api'
    namespace: 'service-portal'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'service-portal-api'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-profile'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'service-portal-api'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-profile'
        annotations:
          ad.datadoghq.com/service-portal-api.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'service-portal-api'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-profile'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          EMAIL_REPLY_TO_NAME:
            valueFrom:
              secretKeyRef:
                name: 'EMAIL_REPLY_TO_NAME'
                key: '/k8s/service-portal/api/EMAIL_REPLY_TO_NAME'
        resources:
          limits:
            cpu: '800m'
            memory: '1024Mi'
          requests:
            cpu: '400m'
            memory: '512Mi'
      serviceAccountName: 'service-portal-api'
      initContainers:
        - args:
            - 'sequelize-cli'
            - 'db:migrate'
          command:
            - 'npx'
          image: ''
          env:
            NO_UPDATE_NOTIFIER: 'true'
portals-admin:
  metadata:
    name: 'portals-admin'
    namespace: 'portals-admin'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'portals-admin'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/portals-admin'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'portals-admin'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/portals-admin'
        annotations:
          ad.datadoghq.com/portals-admin.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'portals-admin'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/portals-admin'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          SI_PUBLIC_DD_RUM_CLIENT_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'SI_PUBLIC_DD_RUM_CLIENT_TOKEN'
                key: '/k8s/DD_RUM_CLIENT_TOKEN'
        resources:
          limits:
            cpu: '400m'
            memory: '512Mi'
          requests:
            cpu: '200m'
            memory: '256Mi'
samradsgatt:
  metadata:
    name: 'samradsgatt'
    namespace: 'samradsgatt'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'samradsgatt'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/samradsgatt'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'samradsgatt'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/samradsgatt'
        annotations:
          ad.datadoghq.com/samradsgatt.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'samradsgatt'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/samradsgatt'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          DD_RUM_CLIENT_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'DD_RUM_CLIENT_TOKEN'
                key: '/k8s/DD_RUM_CLIENT_TOKEN'
        resources:
          limits:
            cpu: '400m'
            memory: '512Mi'
          requests:
            cpu: '200m'
            memory: '256Mi'
api:
  metadata:
    name: 'api'
    namespace: 'islandis'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'api'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/api'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'api'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/api'
        annotations:
          ad.datadoghq.com/api.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'api'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/api'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/health'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          DRIVING_LICENSE_BOOK_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: 'DRIVING_LICENSE_BOOK_PASSWORD'
                key: '/k8s/api/DRIVING_LICENSE_BOOK_PASSWORD'
        resources:
          limits:
            cpu: '800m'
            memory: '2048Mi'
          requests:
            cpu: '200m'
            memory: '1024Mi'
        command:
          - 'node'
        args:
          - '--tls-min-v1.0'
          - '--no-experimental-fetch'
          - 'main.js'
        volumeMounts:
          - name: 'islyklar.p12'
            mountPath: '/etc/config/islyklar.p12'
      serviceAccountName: 'api'
web:
  metadata:
    name: 'web'
    namespace: 'islandis'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'web'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/web'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'web'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/web'
        annotations:
          ad.datadoghq.com/web.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'web'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/web'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          DD_RUM_CLIENT_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'DD_RUM_CLIENT_TOKEN'
                key: '/k8s/DD_RUM_CLIENT_TOKEN'
        resources:
          limits:
            cpu: '400m'
            memory: '512Mi'
          requests:
            cpu: '200m'
            memory: '256Mi'
search-indexer-service:
  metadata:
    name: 'search-indexer-service'
    namespace: 'search-indexer'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'search-indexer-service'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-search-indexer'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'search-indexer-service'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-search-indexer'
        annotations:
          ad.datadoghq.com/search-indexer-service.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'search-indexer-service'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-search-indexer'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          API_CMS_SYNC_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'API_CMS_SYNC_TOKEN'
                key: '/k8s/search-indexer/API_CMS_SYNC_TOKEN'
        resources:
          requests:
            cpu: '100m'
            memory: '512Mi'
          limits:
            cpu: '400m'
            memory: '2048Mi'
      serviceAccountName: 'search-indexer'
      initContainers:
        - args:
            - '/webapp/migrateAws.js'
          command:
            - '/usr/local/bin/node'
          name: 'migrate-aws'
          image: ''
          env:
            APPLICATION_URL: 'http://search-indexer-service'
            ELASTIC_NODE: 'https://vpc-search-njkekqydiegezhr4vqpkfnw5la.eu-west-1.es.amazonaws.com'
            ELASTIC_INDEX: 'island-is'
            CONTENTFUL_SPACE: '8k0h54kbe6bj'
            CONTENTFUL_ENVIRONMENT: 'master'
            CONTENTFUL_HOST: 'preview.contentful.com'
            CONTENTFUL_ENTRY_FETCH_CHUNK_SIZE: '20'
            S3_BUCKET: 'dev-es-custom-packages'
            ELASTIC_DOMAIN: 'search'
        - args:
            - '/webapp/migrateElastic.js'
          command:
            - '/usr/local/bin/node'
          name: 'migrate-elastic'
          image: ''
          env:
            APPLICATION_URL: 'http://search-indexer-service'
            ELASTIC_NODE: 'https://vpc-search-njkekqydiegezhr4vqpkfnw5la.eu-west-1.es.amazonaws.com'
            ELASTIC_INDEX: 'island-is'
            CONTENTFUL_SPACE: '8k0h54kbe6bj'
            CONTENTFUL_ENVIRONMENT: 'master'
            CONTENTFUL_HOST: 'preview.contentful.com'
            CONTENTFUL_ENTRY_FETCH_CHUNK_SIZE: '20'
            S3_BUCKET: 'dev-es-custom-packages'
            ELASTIC_DOMAIN: 'search'
        - args:
            - '/webapp/migrateKibana.js'
          command:
            - '/usr/local/bin/node'
          name: 'migrate-kibana'
          image: ''
          env:
            APPLICATION_URL: 'http://search-indexer-service'
            ELASTIC_NODE: 'https://vpc-search-njkekqydiegezhr4vqpkfnw5la.eu-west-1.es.amazonaws.com'
            ELASTIC_INDEX: 'island-is'
            CONTENTFUL_SPACE: '8k0h54kbe6bj'
            CONTENTFUL_ENVIRONMENT: 'master'
            CONTENTFUL_HOST: 'preview.contentful.com'
            CONTENTFUL_ENTRY_FETCH_CHUNK_SIZE: '20'
            S3_BUCKET: 'dev-es-custom-packages'
            ELASTIC_DOMAIN: 'search'
xroad-collector:
  metadata:
    name: 'xroad-collector'
    namespace: 'xroad-collector'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'xroad-collector'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-xroad-collector'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'xroad-collector'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-xroad-collector'
        annotations:
          ad.datadoghq.com/xroad-collector.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'xroad-collector'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-xroad-collector'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          CONFIGCAT_SDK_KEY:
            valueFrom:
              secretKeyRef:
                name: 'CONFIGCAT_SDK_KEY'
                key: '/k8s/configcat/CONFIGCAT_SDK_KEY'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
        command:
          - 'node'
        args:
          - '--no-experimental-fetch'
          - 'main.js'
      serviceAccountName: 'xroad-collector'
skilavottord-web:
  metadata:
    name: 'skilavottord-web'
    namespace: 'skilavottord'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'skilavottord-web'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/skilavottord-web'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'skilavottord-web'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/skilavottord-web'
        annotations:
          ad.datadoghq.com/skilavottord-web.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'skilavottord-web'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/skilavottord-web'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          DD_RUM_CLIENT_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'DD_RUM_CLIENT_TOKEN'
                key: '/k8s/DD_RUM_CLIENT_TOKEN'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
skilavottord-ws:
  metadata:
    name: 'skilavottord-ws'
    namespace: 'skilavottord'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'skilavottord-ws'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/skilavottord-ws'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'skilavottord-ws'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/skilavottord-ws'
        annotations:
          ad.datadoghq.com/skilavottord-ws.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'skilavottord-ws'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/skilavottord-ws'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          FJARSYSLA_REST_USER:
            valueFrom:
              secretKeyRef:
                name: 'FJARSYSLA_REST_USER'
                key: '/k8s/skilavottord/FJARSYSLA_REST_USER'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
      initContainers:
        - args:
            - 'sequelize-cli'
            - 'db:migrate'
          command:
            - 'npx'
          image: ''
          env:
            NO_UPDATE_NOTIFIER: 'true'
services-documents:
  metadata:
    name: 'services-documents'
    namespace: 'services-documents'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'services-documents'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-documents'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'services-documents'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-documents'
        annotations:
          ad.datadoghq.com/services-documents.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'services-documents'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-documents'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          CONFIGCAT_SDK_KEY:
            valueFrom:
              secretKeyRef:
                name: 'CONFIGCAT_SDK_KEY'
                key: '/k8s/configcat/CONFIGCAT_SDK_KEY'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
      initContainers:
        - args:
            - 'sequelize-cli'
            - 'db:migrate'
          command:
            - 'npx'
          image: ''
          env:
            NO_UPDATE_NOTIFIER: 'true'
island-ui-storybook:
  metadata:
    name: 'island-ui-storybook'
    namespace: 'storybook'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'island-ui-storybook'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/island-ui-storybook'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'island-ui-storybook'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/island-ui-storybook'
        annotations:
          ad.datadoghq.com/island-ui-storybook.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'island-ui-storybook'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/island-ui-storybook'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          CONFIGCAT_SDK_KEY:
            valueFrom:
              secretKeyRef:
                name: 'CONFIGCAT_SDK_KEY'
                key: '/k8s/configcat/CONFIGCAT_SDK_KEY'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
contentful-translation-extension:
  metadata:
    name: 'contentful-translation-extension'
    namespace: 'contentful-translation-extension'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'contentful-translation-extension'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/contentful-translation-extension'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'contentful-translation-extension'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/contentful-translation-extension'
        annotations:
          ad.datadoghq.com/contentful-translation-extension.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'contentful-translation-extension'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/contentful-translation-extension'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          CONFIGCAT_SDK_KEY:
            valueFrom:
              secretKeyRef:
                name: 'CONFIGCAT_SDK_KEY'
                key: '/k8s/configcat/CONFIGCAT_SDK_KEY'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
download-service:
  metadata:
    name: 'download-service'
    namespace: 'download-service'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'download-service'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/download-service'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'download-service'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/download-service'
        annotations:
          ad.datadoghq.com/download-service.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'download-service'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/download-service'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: 'download/v1/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: 'download/v1/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          POSTHOLF_BASE_PATH:
            valueFrom:
              secretKeyRef:
                name: 'POSTHOLF_BASE_PATH'
                key: '/k8s/documents/POSTHOLF_BASE_PATH'
        resources:
          limits:
            cpu: '400m'
            memory: '512Mi'
          requests:
            cpu: '200m'
            memory: '256Mi'
icelandic-names-registry-backend:
  metadata:
    name: 'icelandic-names-registry-backend'
    namespace: 'icelandic-names-registry'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'icelandic-names-registry-backend'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/icelandic-names-registry-backend'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'icelandic-names-registry-backend'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/icelandic-names-registry-backend'
        annotations:
          ad.datadoghq.com/icelandic-names-registry-backend.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'icelandic-names-registry-backend'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/icelandic-names-registry-backend'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          CONFIGCAT_SDK_KEY:
            valueFrom:
              secretKeyRef:
                name: 'CONFIGCAT_SDK_KEY'
                key: '/k8s/configcat/CONFIGCAT_SDK_KEY'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
      initContainers:
        - args:
            - 'sequelize-cli'
            - 'db:migrate'
          command:
            - 'npx'
          name: 'migrations'
          image: ''
          env:
            NO_UPDATE_NOTIFIER: 'true'
        - args:
            - 'sequelize-cli'
            - 'db:seed:all'
          command:
            - 'npx'
          name: 'seeds'
          image: ''
          env:
            NO_UPDATE_NOTIFIER: 'true'
endorsement-system-api:
  metadata:
    name: 'endorsement-system-api'
    namespace: 'endorsement-system'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'endorsement-system-api'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-endorsements-api'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'endorsement-system-api'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-endorsements-api'
        annotations:
          ad.datadoghq.com/endorsement-system-api.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'endorsement-system-api'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-endorsements-api'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          SOFFIA_PASS:
            valueFrom:
              secretKeyRef:
                name: 'SOFFIA_PASS'
                key: '/k8s/service-portal/SOFFIA_PASS'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
        command:
          - 'node'
        args:
          - '--tls-min-v1.0'
          - '--no-experimental-fetch'
          - 'main.js'
      serviceAccountName: 'endorsement-system-api'
      initContainers:
        - args:
            - 'sequelize-cli'
            - 'db:migrate'
          command:
            - 'npx'
          name: 'migrations'
          image: ''
          env:
            NO_UPDATE_NOTIFIER: 'true'
air-discount-scheme-web:
  metadata:
    name: 'air-discount-scheme-web'
    namespace: 'air-discount-scheme'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'air-discount-scheme-web'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-web'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'air-discount-scheme-web'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-web'
        annotations:
          ad.datadoghq.com/air-discount-scheme-web.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'air-discount-scheme-web'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-web'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          IDENTITY_SERVER_SECRET:
            valueFrom:
              secretKeyRef:
                name: 'IDENTITY_SERVER_SECRET'
                key: '/k8s/air-discount-scheme/web/IDENTITY_SERVER_SECRET'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
air-discount-scheme-backend:
  metadata:
    name: 'air-discount-scheme-backend'
    namespace: 'air-discount-scheme'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'air-discount-scheme-backend'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-backend'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'air-discount-scheme-backend'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-backend'
        annotations:
          ad.datadoghq.com/air-discount-scheme-backend.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'air-discount-scheme-backend'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-backend'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          IDENTITY_SERVER_CLIENT_SECRET:
            valueFrom:
              secretKeyRef:
                name: 'IDENTITY_SERVER_CLIENT_SECRET'
                key: '/k8s/air-discount-scheme-backend/VEGAGERDIN_IDS_CLIENTS_ADS_SECRET'
        resources:
          limits:
            cpu: '400m'
            memory: '512Mi'
          requests:
            cpu: '200m'
            memory: '256Mi'
      initContainers:
        - args:
            - 'sequelize-cli'
            - 'db:migrate'
          command:
            - 'npx'
          image: ''
          env:
            NO_UPDATE_NOTIFIER: 'true'
air-discount-scheme-api:
  metadata:
    name: 'air-discount-scheme-api'
    namespace: 'air-discount-scheme'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'air-discount-scheme-api'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-api'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'air-discount-scheme-api'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-api'
        annotations:
          ad.datadoghq.com/air-discount-scheme-api.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'air-discount-scheme-api'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/air-discount-scheme-api'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          ADMINS:
            valueFrom:
              secretKeyRef:
                name: 'ADMINS'
                key: '/k8s/air-discount-scheme/api/ADMINS'
        resources:
          limits:
            cpu: '400m'
            memory: '512Mi'
          requests:
            cpu: '200m'
            memory: '256Mi'
      serviceAccountName: 'air-discount-scheme-api'
github-actions-cache:
  metadata:
    name: 'github-actions-cache'
    namespace: 'github-actions-cache'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'github-actions-cache'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/github-actions-cache'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'github-actions-cache'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/github-actions-cache'
        annotations:
          ad.datadoghq.com/github-actions-cache.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'github-actions-cache'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/github-actions-cache'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/health'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          CONFIGCAT_SDK_KEY:
            valueFrom:
              secretKeyRef:
                name: 'CONFIGCAT_SDK_KEY'
                key: '/k8s/configcat/CONFIGCAT_SDK_KEY'
        resources:
          limits:
            cpu: '400m'
            memory: '512Mi'
          requests:
            cpu: '100m'
            memory: '256Mi'
        command:
          - 'node'
        args:
          - '--tls-min-v1.0'
          - '--no-experimental-fetch'
          - 'main.js'
      serviceAccountName: 'github-actions-cache'
user-notification:
  metadata:
    name: 'user-notification'
    namespace: 'user-notification'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'user-notification'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-notification'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'user-notification'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-notification'
        annotations:
          ad.datadoghq.com/user-notification.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'user-notification'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-notification'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          FIREBASE_CREDENTIALS:
            valueFrom:
              secretKeyRef:
                name: 'FIREBASE_CREDENTIALS'
                key: '/k8s/user-notification/firestore-credentials'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
        command:
          - 'node'
        args:
          - '--no-experimental-fetch'
          - 'main.js'
      serviceAccountName: 'user-notification'
user-notification-worker:
  metadata:
    name: 'user-notification-worker'
    namespace: 'user-notification'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'user-notification-worker'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-notification'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'user-notification-worker'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-notification'
        annotations:
          ad.datadoghq.com/user-notification-worker.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'user-notification-worker'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-user-notification'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          CONTENTFUL_ACCESS_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'CONTENTFUL_ACCESS_TOKEN'
                key: '/k8s/user-notification/CONTENTFUL_ACCESS_TOKEN'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
        command:
          - 'node'
        args:
          - '--no-experimental-fetch'
          - 'main.js'
          - '--job=worker'
      serviceAccountName: 'user-notification-worker'
external-contracts-tests:
  metadata:
    name: 'external-contracts-tests'
    namespace: 'external-contracts-tests'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'external-contracts-tests'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/external-contracts-tests'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'external-contracts-tests'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/external-contracts-tests'
        annotations:
          ad.datadoghq.com/external-contracts-tests.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'external-contracts-tests'
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/external-contracts-tests'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          SOFFIA_PASS:
            valueFrom:
              secretKeyRef:
                name: 'SOFFIA_PASS'
                key: '/k8s/service-portal/SOFFIA_PASS'
        resources:
          limits:
            cpu: '1'
            memory: '1024Mi'
          requests:
            cpu: '500m'
            memory: '512Mi'
application-system-api-worker:
  metadata:
    name: 'application-system-api-worker'
    namespace: 'application-system'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'application-system-api-worker'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-api'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'application-system-api-worker'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-api'
        annotations:
          ad.datadoghq.com/application-system-api-worker.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'application-system-api-worker'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/application-system-api'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          XROAD_PAYMENT_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: 'XROAD_PAYMENT_PASSWORD'
                key: '/k8s/application-system-api/PAYMENT_PASSWORD'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
        command:
          - 'node'
        args:
          - 'main.js'
          - '--job'
          - 'worker'
      serviceAccountName: 'application-system-api-worker'
contentful-entry-tagger-service:
  metadata:
    name: 'contentful-entry-tagger-service'
    namespace: 'contentful-entry-tagger'
  labels:
    tags.datadoghq.com/env: 'dev'
    tags.datadoghq.com/service: 'contentful-entry-tagger-service'
    tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-contentful-entry-tagger'
  spec:
    strategy:
      type: 'RollingUpdate'
      rollingUpdate:
        maxSurge: '25%'
        maxUnavailable: '25%'
    template:
      metadata:
        labels:
          tags.datadoghq.com/env: 'dev'
          tags.datadoghq.com/service: 'contentful-entry-tagger-service'
          tags.datadoghq.com/version: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-contentful-entry-tagger'
        annotations:
          ad.datadoghq.com/contentful-entry-tagger-service.logs: "[{\n              \"log_processing_rules\": [{\n                \"type\": \"mask_sequences\", \n                \"name\": \"mask_national_ids\", \n                \"replace_placeholder\": \"--MASKED--\", \n                \"pattern\" : \"\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b\"\n              }]\n            }]"
    spec:
      containers:
        name: 'contentful-entry-tagger-service'
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          fsGroup: 65534
        image: '821090935708.dkr.ecr.eu-west-1.amazonaws.com/services-contentful-entry-tagger'
        imagePullPolicy: 'IfNotPresent'
        livenessProbe:
          httpGet:
            path: '/liveness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: '/readiness'
          initialDelaySeconds: 3
          timeoutSeconds: 3
        env:
          CONTENTFUL_REQUEST_TOKEN:
            valueFrom:
              secretKeyRef:
                name: 'CONTENTFUL_REQUEST_TOKEN'
                key: '/k8s/contentful-entry-tagger/CONTENTFUL_REQUEST_TOKEN'
        resources:
          limits:
            memory: '256Mi'
            cpu: '200m'
          requests:
            memory: '128Mi'
            cpu: '100m'
      serviceAccountName: 'contentful-entry-tagger'
