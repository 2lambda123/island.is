name: Monorepo pipeline - NX cloud

on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# concurrency:
#   group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
#   cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read
  actions: read

env:
  COMPOSE_HTTP_TIMEOUT: 180
  GITHUB_ACTIONS_CACHE_URL: https://cache.dev01.devland.is/
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}
  USE_NX_CLOUD: ${{ contains(github.event.pull_request.labels.*.name, 'nx-cloud') }}
  MAX_JOBS: 30
jobs:
  nx:
    runs-on: ec2-runners
    container:
      image: public.ecr.aws/m3u4c4h9/island-is/actions-runner-public:latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        nx-target:
          - build
          - lint
    if: contains(github.event.pull_request.labels.*.name, 'nx-cloud')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate matrix output
        run: |
          matrix=$((
            echo '${{ toJSON(matrix) }}'
          ) | jq -c .)
          echo "$matrix" > matrix
          echo "matrix: $matrix"
          echo "::set-output name=matrix::$matrix"
        id: matrix
      - name: Upload matrix
        uses: actions/upload-artifact@v3
        id: upload-matrix
        with:
          name: ${{ hashFiles('matrix') || 'none' }}
          path: matrix
          if-no-files-found: warn
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ hashFiles('matrix') || 'none' }}
          path: matrix
          if-no-files-found: warn
      - uses: nrwl/nx-set-shas@v3
      - run: |
          echo "BASE=$NX_BASE" >> $GITHUB_ENV
          echo "HEAD=$NX_HEAD" >> $GITHUB_ENV
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Setup yarn
        run: npm install -g yarn

      - name: Calculate cache key for node_modules
        id: calculate_node_modules_hash
        run: |
          PACKAGE_JSON_HASH=$(cat package.json | jq '{resolutions,dependencies,devDependencies}' | sha1sum -t | cut -f1 -d" ")
          echo "PACKAGE_JSON_HASH: $PACKAGE_JSON_HASH"
          NODE_MODULES_HASH=${{ runner.os }}-${{ hashFiles('yarn.lock') }}-$PACKAGE_JSON_HASH
          echo "NODE_MODULES_HASH: $NODE_MODULES_HASH"
          echo "NODE_MODULES_HASH=$NODE_MODULES_HASH" >> $GITHUB_ENV

      - name: Calculate cache keys for generated files
        id: calculate_generated_files_cache_key
        run: |
          export HASH=${{ hashFiles('scripts/schemas.js', 'libs/cms/src/lib/generated/contentfulTypes.d.ts', 'apps/air-discount-scheme/web/i18n/withLocale.tsx', 'apps/air-discount-scheme/web/components/AppLayout/AppLayout.tsx', 'apps/air-discount-scheme/web/components/Header/Header.tsx', 'apps/air-discount-scheme/web/screens/**.tsx', 'apps/**/codegen.yml', 'libs/**/codegen.yml', 'apps/**/*.model.ts', 'libs/**/*.model.ts', 'apps/**/*.enum.ts', 'libs/**/*.enum.ts', 'apps/**/queries/**/*.tsx?', 'libs/**/queries/**/*.tsx?', 'libs/**/mutations/**/*.tsx?', 'libs/**/fragments/**/*.tsx?' , 'apps/**/*.resolver.ts', 'libs/**/*.resolver.ts', 'apps/**/*.service.ts', 'libs/**/*.service.ts', 'apps/**/*.dto.ts', 'libs/**/*.dto.ts', 'apps/**/*.input.ts', 'libs/**/*.input.ts', 'apps/**/*.module.ts', 'libs/**/*.module.ts', 'apps/**/*.controller.ts', 'libs/**/*.controller.ts', 'apps/**/*.union.ts', 'libs/**/*.union.ts', 'apps/**/*.graphql.ts', 'libs/**/*.graphql.ts', 'libs/**/*.graphql') }}
          GENERATED_FILES_KEY=${{ runner.os }}-$HASH-files-generated
          echo "GENERATED_FILES_KEY: $GENERATED_FILES_KEY"
          echo "GENERATED_FILES_KEY=$GENERATED_FILES_KEY" >> $GITHUB_ENV

      - name: Cache for NodeJS dependencies - host OS
        id: node-modules
        continue-on-error: true
        uses: ./.github/actions/cache
        with:
          path: node_modules
          key: ${{ env.NODE_MODULES_HASH }}-yarn

      - name: Check cache success
        run: '[[ "${{ steps.node-modules.outputs.success }}" != "false" ]] || exit 1'

      - name: Cache for generated files
        id: generated-files-cache
        continue-on-error: true
        uses: ./.github/actions/cache
        with:
          path: generated_files.tar.gz
          key: ${{ env.GENERATED_FILES_KEY }}

      - name: Check cache success
        run: '[[ "${{ steps.generated-files-cache.outputs.success }}" != "false" ]] || exit 1'

      - name: Building NodeJS dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: ./scripts/ci/10_prepare-host-deps.sh

      - name: Generate schemas
        if: steps.generated-files-cache.outputs.cache-hit != 'true'
        run: |
          node --version
          tar zcvf generated_files.tar.gz $(./scripts/ci/get-files-touched-by.sh yarn schemas --skip-cache | xargs realpath --relative-to $(pwd))

      - name: Untar generated files
        run: tar zxvf generated_files.tar.gz

      - name: Building
        run: |
          ./scripts/ci/run-nx-affected.sh ${{ matrix.nx-target }}

      - name: fix hanging post job
        run: git config --local --get remote.origin.url

  check-matrix:
    runs-on: ec2-runners
    container:
      image: public.ecr.aws/m3u4c4h9/island-is/actions-runner-public:latest
    needs: [ nx ]
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/download-artifact@v3
      - run: |
          echo "Check matrix"
          matrix="$(cat */matrix | jq -c --slurp .)"
          echo "matrix: $matrix"
          echo "::set-output name=matrix::$matrix"
        id: matrix

  # TODO: trying to dynamically get the the matrix result output, unfinished
  # success:
  #   if: always()
  #   name: "Success ${{ matrix.includes.nx-target }}"
  #   runs-on: ec2-runners
  #   needs:
  #     - check-matrix
  #   container:
  #     image: public.ecr.aws/m3u4c4h9/island-is/actions-runner-public:latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: ${{ fromJSON(needs.check-matrix.outputs.nx-target) }}
  #   steps:
  #     - name: Check nx success
  #       run: '[[ ${{ toJSON(needs.nx.result) }} != "failure" ]] || exit 1'
  #     - name: Announce success
  #       run: echo "${{ toJSON(needs.nx) }} is successful"
