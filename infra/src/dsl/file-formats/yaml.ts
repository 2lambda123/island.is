import { dump, load } from 'js-yaml'
import {
  FeatureKubeJob,
  HelmValueFile,
  KubeValueFile,
  LocalrunValueFile,
} from '../types/output-types'
import { EnvironmentConfig } from '../types/charts'
const HEADER =
  '#####################################################################\n' +
  '#\n' +
  '# Do not edit this file manually, it is automatically generated.\n' +
  '# Run "yarn charts" instead.\n' +
  '#\n' +
  '#####################################################################\n'
const kubeSeperator = '---'

export const dumpOpts = {
  // Temporary overrides on sortKeys and skipInvalid
  sortKeys: true,
  noRefs: true,
  forceQuotes: true,
  skipInvalid: false,
}
export const reformatYaml = (content: string): string => {
  const obj = load(content, { json: true })
  return dump(obj, dumpOpts)
}
export const dumpJobYaml = (job: FeatureKubeJob) => dump(job, dumpOpts)

export const dumpKubeYaml = (valueFile: KubeValueFile) => {
  const { services } = valueFile
  const serviceYamls = Object.values(services).map((serviceData) => {
    return dump(serviceData, dumpOpts) + kubeSeperator
  })
  return HEADER + serviceYamls.join('\n')
}

export const dumpServiceHelm = (
  env: EnvironmentConfig,
  valueFile: HelmValueFile,
) => {
  const { namespaces, services } = valueFile
  const namespaceLabels = env.feature ? { namespaceType: 'feature' } : {}
  return (
    HEADER +
    dump(
      { namespaces: { namespaces, labels: namespaceLabels }, ...services },
      dumpOpts,
    )
  )
}
