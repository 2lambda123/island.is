require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@nrwl/react-native/nx_post_install'
require_relative '../../node_modules/react-native-unimodules/cocoapods.rb'

$RNFirebaseAnalyticsWithoutAdIdSupport = true

platform :ios, '11.0'

target 'IslandApp' do
  use_unimodules!(
    modules_paths: ['../../node_modules'],
    exclude: [
      'expo-image-loader',
      'unimodules-barcode-scanner-interface',
      'unimodules-camera-interface',
      'unimodules-image-loader-interface',
      'unimodules-sensors-interface',
      'unimodules-face-detector-interface',
      'unimodules-task-manager-interface'
    ]
  )

  config = use_native_modules!
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true
  )

  pod 'CodePush', :path => '../../node_modules/react-native-code-push'
  pod 'RNSentry', path: '../../node_modules/@sentry/react-native'
  pod 'RNKeychain', :path => '../../node_modules/react-native-keychain'
  pod 'RNLocalize', :path => '../../node_modules/react-native-localize'
  pod 'RNFBApp', :path => '../../node_modules/@react-native-firebase/app'
  pod 'RNFBPerf', :path => '../../node_modules/@react-native-firebase/perf'
  pod 'RNFBMessaging', :path => '../../node_modules/@react-native-firebase/messaging'
  pod 'RNCAsyncStorage', :path => '../../node_modules/@react-native-community/async-storage'
  pod 'ReactNativeKeyboardManager', :path => '../../node_modules/react-native-keyboard-manager'
  pod 'ReactNativeNavigation', :path => '../../node_modules/react-native-navigation'
  pod 'Interactable', :path => '../../node_modules/react-native-interactable'
  pod 'react-native-cookies', :path => '../../node_modules/@react-native-community/react-native-cookies/ios'
  pod 'react-native-segmented-control', :path => '../../node_modules/@react-native-segmented-control/segmented-control'
  pod 'react-native-webview', :path => '../../node_modules/react-native-webview'
  pod 'react-native-app-auth', :path => '../../node_modules/react-native-app-auth'
  pod 'react-native-ultimate-config', :path => '../../node_modules/react-native-ultimate-config'
  pod 'react-native-passkit-wallet', path: '../../node_modules/react-native-passkit-wallet'
  pod 'react-native-spotlight-search', path: '../../node_modules/react-native-spotlight-search'
  pod 'react-native-flipper', path: '../../node_modules/react-native-flipper'

  use_flipper!({
    'Flipper-Folly' => '2.5.3',
    'Flipper' => '0.87.0',
    'Flipper-RSocket' => '1.3.1'
  })

  # Define find-and-replace function
  def find_and_replace(dir, findstr, replacestr)
    Dir[dir].each do |name|
        text = File.read(name)
        replace = text.gsub(findstr,replacestr)
        replaced = text.index(replacestr)
        if replaced == nil && text != replace
            puts "Fix: " + name
            File.open(name, "w") { |file| file.puts replace }
            STDOUT.flush
        end
    end
    Dir[dir + '*/'].each(&method(:find_and_replace))
  end


  post_install do |installer|
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable this next line.
    flipper_post_install(installer)

    nx_post_install(installer)

    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # skip arm64 for ios simulators
        config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '11.0'
      end
    end

    system('chmod +rw Pods/RCT-Folly/folly/synchronization/DistributedMutex-inl.h')

    find_and_replace("Pods/RCT-Folly/folly/synchronization/DistributedMutex-inl.h",
    "atomic_notify_one(state)", "folly::atomic_notify_one(state)")

    find_and_replace("Pods/RCT-Folly/folly/synchronization/DistributedMutex-inl.h",
    "atomic_wait_until(&state, previous | data, deadline)", "folly::atomic_wait_until(&state, previous | data, deadline)")
  end
end
